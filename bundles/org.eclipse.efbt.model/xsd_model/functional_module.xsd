<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:functional_module="http://www.eclipse.org/functional_module" xmlns:module_management="http://www.eclipse.org/module_management" xmlns:scenarios="http://www.eclipse.org/scenarios" xmlns:xsd="http://www.w3.org/2001/XMLSchema" ecore:nsPrefix="functional_module" ecore:package="functional_module" targetNamespace="http://www.eclipse.org/functional_module">
  <xsd:import namespace="http://www.eclipse.org/module_management" schemaLocation="module_management.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/emf/2002/Ecore" schemaLocation="Ecore.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/scenarios" schemaLocation="scenarios.xsd"/>
  <xsd:complexType name="DataSetTransformationFunctionalModule">
    <xsd:annotation>
      <xsd:documentation>A DataSetTransformationFunctionalModule is a set of releted DataSetTransformations.
Usually they will be groups where the derived cube associated with DataSetTransformation, has source cubes which are associated with other DataSetTransformations in the same group.
</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functional_module:LeafFunctionalModule"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LeafFunctionalModule">
    <xsd:annotation>
      <xsd:documentation>A  LeafFunctionalModule is a FunctionalModule which does not contain any sub FunctionalModules</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functional_module:FunctionalModule">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="scenarioSet" type="scenarios:ScenarioSet">
            <xsd:annotation>
              <xsd:documentation>Any ScenarioSets associated with the Transformation or FunctionalModule. 
The individual Scenarios in such a ScenarioSet are associated with different behaviour in the FunctionalModule that we would like to test seperately. 
Scenarios can themsleves be linked to parts of the regulatory rulebook, allowing an annotation of the behaviour we wish to test.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ParallelFunctionalModule">
    <xsd:annotation>
      <xsd:documentation>A FunctionalModuleSet, where the sub FunctionalModules can be run in parallel , or ain any order, since there is no dependency between them whereby one needs to run before another.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functional_module:FunctionalModuleSet"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ScenarioSetFunctionalModule">
    <xsd:annotation>
      <xsd:documentation>A FunctionalModuleSet whereby it is possible that ony some of the sub Transformation Schemes are executed for a test, dependant upon the Scenarios that are associated with the Test.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functional_module:FunctionalModuleSet">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" minOccurs="0" name="scenarioSet" type="scenarios:ScenarioSet">
            <xsd:annotation>
              <xsd:documentation>The associated  ScenarioSet</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ScenarioUnionFunctionalModule">
    <xsd:annotation>
      <xsd:documentation>A special kind of TransformationSchem which represents the union of multiple cubes with the same structure which were each created due to a specific scenario</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functional_module:DataSetTransformationFunctionalModule"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="SerialFunctionalModule">
    <xsd:annotation>
      <xsd:documentation>A FunctionalModuleSet, where the sub FunctionalModules are an ordered set which must be executed in order.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functional_module:FunctionalModuleSet"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="FunctionalModuleSet">
    <xsd:annotation>
      <xsd:documentation>A set of FunctionalModules.
Note that FunctionalModulesSet is also a subclass of FunctionalModule, so the set can also include FunctionalModulesSets</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functional_module:FunctionalModule">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="subTransformationsAndSchemes" type="functional_module:FunctionalModule">
            <xsd:annotation>
              <xsd:documentation>The  contained set FunctionalModules </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ReadDataSourceFunctionalModule">
    <xsd:annotation>
      <xsd:documentation>A FunctionalModule which represents the reading in data from base cubes. Note that the BIRD input layer is made up of BaseCubes.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functional_module:LeafFunctionalModule"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ReportCellCreationFunctionalModule">
    <xsd:annotation>
      <xsd:documentation>A FunctionalModule which represents the calculation of report cells.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="functional_module:LeafFunctionalModule"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="FunctionalModule">
    <xsd:annotation>
      <xsd:documentation>FunctionalModule is the super class of ReportCellFunctionalModule,ReadDataSourceFunctionalModule, and DataSetTransformationFunctionalModule.
It represents a set of processing.</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute ecore:id="true" name="name" type="ecore:EString">
      <xsd:annotation>
        <xsd:documentation>The name of the FunctionalModule</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:reference="functional_module:FunctionalModule" name="usedTransformationOrScheme" type="xsd:anyURI"/>
    <xsd:attribute ecore:reference="scenarios:Scenario" name="scenario" type="xsd:anyURI"/>
  </xsd:complexType>
  <xsd:complexType name="FunctionalModuleModule">
    <xsd:annotation>
      <xsd:documentation>A module of FunctionalModules</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="module_management:Module">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="functionalModules" type="functional_module:FunctionalModule">
            <xsd:annotation>
              <xsd:documentation>The  set of FunctionalModules </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>
