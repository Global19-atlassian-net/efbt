<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:attribute_lineage="http://www.eclipse.org/attribute_lineage" xmlns:base_cube_data="http://www.eclipse.org/base_cube_data" xmlns:data_lineage="http://www.eclipse.org/data_lineage" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:module_management="http://www.eclipse.org/module_management" xmlns:reports="http://www.eclipse.org/reports" xmlns:scenarios="http://www.eclipse.org/scenarios" xmlns:test="http://www.eclipse.org/test" xmlns:xsd="http://www.w3.org/2001/XMLSchema" ecore:nsPrefix="test" ecore:package="test" targetNamespace="http://www.eclipse.org/test">
  <xsd:import namespace="http://www.eclipse.org/data_lineage" schemaLocation="data_lineage.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/attribute_lineage" schemaLocation="attribute_lineage.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/scenarios" schemaLocation="scenarios.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/reports" schemaLocation="reports.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/module_management" schemaLocation="module_management.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/base_cube_data" schemaLocation="base_cube_data.xsd"/>
  <xsd:import namespace="http://www.eclipse.org/emf/2002/Ecore" schemaLocation="Ecore.xsd"/>
  <xsd:annotation>
    <xsd:documentation> This package describes the test package of FreeBIRDTools</xsd:documentation>
  </xsd:annotation>
  <xsd:annotation>
    <xsd:appinfo ecore:key="license" source="license">Copyright (c) 2019 Openregtech Ltd
 All rights reserved. This file and the accompanying materials are made available under the terms of the Eclipse Public License v2.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v20.html

SPDX-License-Identifier: EPL-2.0 

 Contributors:
 Neil Mackenzie - initial API and implementation&#13;</xsd:appinfo>
  </xsd:annotation>
  <xsd:complexType name="ExecutedTest">
    <xsd:annotation>
      <xsd:documentation>This class represents and executed test</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute ecore:reference="test:TestResult" name="actualResults" type="xsd:anyURI">
      <xsd:annotation>
        <xsd:documentation>The actaul results of the exucuted test</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:unsettable="false" name="testHasRun" type="ecore:EBoolean">
      <xsd:annotation>
        <xsd:documentation>True if a test has run</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:reference="test:TestLogic" name="testLogic" type="xsd:anyURI">
      <xsd:annotation>
        <xsd:documentation>The logic of the test that was run.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:unsettable="false" name="testPassed" type="ecore:EBoolean">
      <xsd:annotation>
        <xsd:documentation>True if the test run created results which matched the expected results</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="ExpectedResults">
    <xsd:annotation>
      <xsd:documentation>Holds expected results, which are associated with TargetCubes. Note that ProgramInput has data associated with BaseCubes.
    </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="expectedResults" type="base_cube_data:TargetTableExpectedResultsData">
        <xsd:annotation>
          <xsd:documentation>The expected results data</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="InputData">
    <xsd:annotation>
      <xsd:documentation>InputData for a test</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:ordered="false" ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="sourceTableData" type="base_cube_data:BaseCubeData">
        <xsd:annotation>
          <xsd:documentation>The set of pupulated BaseCubes that represent the input data.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="name" type="ecore:EString">
      <xsd:annotation>
        <xsd:documentation>The name associated with the input data.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="InputDataModule">
    <xsd:annotation>
      <xsd:documentation>A module containeing a set of input data</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="module_management:Module">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="inputData" type="test:InputData">
            <xsd:annotation>
              <xsd:documentation>The input data that makes up the module</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ReportCellExpectedResults">
    <xsd:annotation>
      <xsd:documentation>ExpectedResults as a set of report cell values</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="reportCellValues" type="reports:ReportCellValue">
        <xsd:annotation>
          <xsd:documentation>This set of report cell values.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="TestDefinition">
    <xsd:annotation>
      <xsd:documentation>A definiton of  a tests in terms of the report cells it aims to calculate, and the subset of scenarios which are to be executed.</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute ecore:id="true" name="name" type="ecore:EString">
      <xsd:annotation>
        <xsd:documentation>The name of the TestDefinition</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute ecore:reference="reports:ReportCell" name="reportCells">
      <xsd:annotation>
        <xsd:documentation>The report cells to be calculated in the TestDefinition</xsd:documentation>
      </xsd:annotation>
      <xsd:simpleType>
        <xsd:list itemType="xsd:anyURI"/>
      </xsd:simpleType>
    </xsd:attribute>
    <xsd:attribute ecore:reference="scenarios:Scenario" name="scenarios">
      <xsd:annotation>
        <xsd:documentation>The scenarios to be executed by the test definition.</xsd:documentation>
      </xsd:annotation>
      <xsd:simpleType>
        <xsd:list itemType="xsd:anyURI"/>
      </xsd:simpleType>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="TestDefinitionModule">
    <xsd:annotation>
      <xsd:documentation>A module containing TestDefinitions</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="module_management:Module">
        <xsd:sequence>
          <xsd:element ecore:resolveProxies="true" maxOccurs="unbounded" minOccurs="0" name="testDefinitions" type="test:TestDefinition">
            <xsd:annotation>
              <xsd:documentation>The test definitions in the module.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TestLogic">
    <xsd:annotation>
      <xsd:documentation>The execution logic of a test. 
Note that the TestDefinition, describing the report cells and scenario names to calculate is a high level , long lived description.
The actual low level logic for executing the  TestDefinition will change over time as the code base and data structures change.
This class stores that logic as an AttributeModel (note that AttributeModel are actually what gets executed)
Storing this TestLogic as an AttributeLineage model, means that as the AtributeLineageModel for an entire release changes,
we can check if the AttributeLineageModel for the test is still a subset of the release (and therefore still a valid test).
We can do this check useing the CompareAttributeLineageModels PlatformCall in the platform_call package.

</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:resolveProxies="true" minOccurs="0" name="attributeLineageModel" type="attribute_lineage:AttributeLineageModel">
        <xsd:annotation>
          <xsd:documentation>The AttributelineageModel</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute ecore:reference="test:TestDefinition" name="testDefinition" type="xsd:anyURI">
      <xsd:annotation>
        <xsd:documentation>The associated TestDefinition</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="TestResult">
    <xsd:annotation>
      <xsd:documentation>This class represents the actual resut of a test, so it can be compared to expected results</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ecore:resolveProxies="true" minOccurs="0" name="datalineageModel" type="data_lineage:DataLineageModel">
        <xsd:annotation>
          <xsd:documentation>The actaul results as a DataLineageModel</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
</xsd:schema>
