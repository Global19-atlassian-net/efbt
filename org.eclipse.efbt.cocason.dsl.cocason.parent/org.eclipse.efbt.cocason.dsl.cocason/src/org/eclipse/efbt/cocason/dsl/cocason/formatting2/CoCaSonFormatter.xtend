/*
 * generated by Xtext 2.23.0
 */
package org.eclipse.efbt.cocason.dsl.cocason.formatting2

import com.google.inject.Inject
import org.eclipse.efbt.controller.core.model.platform_call.SMCubesProgram
import org.eclipse.efbt.cocamo.smcubes.model.smcubes_model.SmcubesModel
import org.eclipse.efbt.cocason.dsl.cocason.services.CoCaSonGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.efbt.cocamo.smcubes.model.smcubes_model.Smcubes_modelPackage
import org.eclipse.efbt.cocamo.smcubes.model.efbt_data_definition.DomainModule
import org.eclipse.efbt.cocamo.smcubes.model.efbt_data_definition.MemberModule
import org.eclipse.efbt.cocamo.smcubes.model.efbt_data_definition.VariableModule
import org.eclipse.efbt.cocamo.smcubes.model.efbt_data_definition.CubeModule
import org.eclipse.efbt.cocamo.smcubes.model.efbt_data_definition.CombinationModule
import org.eclipse.efbt.cocamo.smcubes.model.efbt_vtl_transformation.TransformationSchemeModule
import org.eclipse.efbt.cocamo.smcubes.model.efbt_mapping.MappingDefinitionModule
import org.eclipse.efbt.cocamo.smcubes.model.core.DOMAIN
import org.eclipse.efbt.cocamo.smcubes.model.core.MEMBER
import org.eclipse.efbt.cocamo.smcubes.model.core.VARIABLE
import org.eclipse.efbt.cocamo.smcubes.model.data_definition.CUBE
import org.eclipse.efbt.cocamo.smcubes.model.data_definition.CUBE_STRUCTURE_ITEM
import org.eclipse.efbt.cocamo.smcubes.model.data_definition.CUBE_STRUCTURE
import org.eclipse.efbt.cocamo.smcubes.model.cocamo.SMCubesTestModule
import org.eclipse.efbt.cocamo.smcubes.model.cocamo.SMCubesTest
import org.eclipse.efbt.cocamo.smcubes.model.cocamo.SMCubesTestInputData
import org.eclipse.efbt.cocamo.smcubes.model.base_column_structured_data.BaseColumnStructuredData
import org.eclipse.efbt.cocamo.smcubes.model.base_column_structured_data.BaseRowData
import org.eclipse.efbt.cocamo.smcubes.model.base_column_structured_data.BaseCell
import org.eclipse.efbt.cocamo.core.model.test_definition.TestDefinitionModule
import org.eclipse.efbt.cocamo.core.model.test_definition.TestDefinition
import org.eclipse.efbt.cocamo.core.model.test_definition.TestConstraintsModule
import org.eclipse.efbt.cocamo.core.model.test_definition.TestContraints
import org.eclipse.efbt.cocamo.core.model.test_definition.Param
import org.eclipse.efbt.cocamo.core.model.functionality_module.FunctionalityModuleModule
import org.eclipse.efbt.cocamo.core.model.functionality_module.FunctionalityModule
import org.eclipse.efbt.cocamo.core.model.test_definition.Given
import org.eclipse.efbt.cocamo.core.model.test_definition.When
import org.eclipse.efbt.cocamo.core.model.test_definition.Then
import org.eclipse.efbt.cocamo.smcubes.model.base_column_structured_data.BaseCellWithEnumeratedValue
import org.eclipse.efbt.cocamo.smcubes.model.base_column_structured_data.BaseCellWithValue
import org.eclipse.efbt.cocamo.core.model.test_definition.TestTemplateModule
import org.eclipse.efbt.cocamo.core.model.test_definition.TestTemplate
import org.eclipse.efbt.cocamo.core.model.test_definition.ClauseText
import org.eclipse.efbt.cocamo.smcubes.model.vtl_transformation.TRANSFORMATION_SCHEME
import org.eclipse.efbt.cocamo.smcubes.model.cocamo.SMCubesStaticModel

class CoCaSonFormatter extends AbstractFormatter2 {

	@Inject extension CoCaSonGrammarAccess

	def dispatch void format(SMCubesStaticModel program, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		interior(
			program.regionFor.keyword('{').append[newLine],
			program.regionFor.keyword('}'),
			[indent]
		)
		
		program.smCubesModel.format
		program.requirements.format
		program.testDefinitions.format
		program.tests.format
		program.testTemplates.format
		program.testConstriants.format
		program.functionalityModules.format
	}

def dispatch void format(FunctionalityModuleModule fmModule, extension IFormattableDocument document) {
		interior(
			fmModule.regionFor.keyword('{').append[newLine],
			fmModule.regionFor.keyword('}'),
			[indent]
		)
		
		for (fm : fmModule.functionalityModules) {
			fm.format
		}
	}
	
	def dispatch void format(FunctionalityModule fm, extension IFormattableDocument document) {
		interior(
			fm.regionFor.keyword('{').append[newLine],
			fm.regionFor.keyword('}'),
			[indent]
		)
		
		
	}


	def dispatch void format(TestDefinitionModule testdefModule, extension IFormattableDocument document) {
		interior(
			testdefModule.regionFor.keyword('{').append[newLine],
			testdefModule.regionFor.keyword('}'),
			[indent]
		)
		
		for (testdef : testdefModule.testDefinitions) {
			testdef.format
		}
	}
	
	def dispatch void format(TestDefinition testdef, extension IFormattableDocument document) {
		interior(
			testdef.regionFor.keyword('{').append[newLine],
			testdef.regionFor.keyword('}'),
			[indent]
		)
		
	
		testdef.given.format;
		testdef.when.format;
		testdef.then.format;
	}
	
	def dispatch void format(TestTemplateModule testTemplateModule, extension IFormattableDocument document) {
		interior(
			testTemplateModule.regionFor.keyword('{').append[newLine],
			testTemplateModule.regionFor.keyword('}'),
			[indent]
		)
		
		for (testTemplate : testTemplateModule.templates) {
			testTemplate.format
		}
	}
	
	def dispatch void format(TestTemplate testTemplate, extension IFormattableDocument document) {
		interior(
			testTemplate.regionFor.keyword('{').append[newLine],
			testTemplate.regionFor.keyword('}'),
			[indent]
		)
		
	
	
	
	testTemplate.givenText.format
	testTemplate.whenText.format
	testTemplate.thenText.format
	
	for (param : testTemplate.givenParams)
	{
		param.format
	}
	
	for (param : testTemplate.whenParams)
	{
		param.format
	}
	
	for (param : testTemplate.thenParams)
	{
		param.format
	}
		
	}
	
	def dispatch void format(ClauseText  text, extension IFormattableDocument document) {
		
		text.regionFor.assignment(clauseTextAccess.nameAssignment_2).append[newLine]
	}
	
	def dispatch void format(Given given, extension IFormattableDocument document) {
		interior(
			given.regionFor.keyword('{').append[newLine],
			given.regionFor.keyword('}'),
			[indent]
		)
		
		for (param : given.params) {
			param.format
		}
	}
	
	def dispatch void format(When when, extension IFormattableDocument document) {
		interior(
			when.regionFor.keyword('{').append[newLine],
			when.regionFor.keyword('}'),
			[indent]
		)
		when.params
		for (param : when.params) {
			param.format
		}
	}
	
	def dispatch void format(Then then, extension IFormattableDocument document) {
		interior(
			then.regionFor.keyword('{').append[newLine],
			then.regionFor.keyword('}'),
			[indent]
		)
		then.params
		for (param : then.params) {
			param.format
		}
	}
	
	def dispatch void format(TestConstraintsModule testconstraintsModule, extension IFormattableDocument document) {
		interior(
			testconstraintsModule.regionFor.keyword('{').append[newLine],
			testconstraintsModule.regionFor.keyword('}'),
			[indent]
		)
		
		for (contraint : testconstraintsModule.coverageTestSets) {
			contraint.format
		}
	}
	
	def dispatch void format(TestContraints contraint, extension IFormattableDocument document) {
		interior(
			contraint.regionFor.keyword('{').append[newLine],
			contraint.regionFor.keyword('}'),
			[indent]
		)
		
		
		for (param : contraint.givenParams) {
			param.format
		}
		for (param : contraint.whenParams) {
			param.format
		}
		for (param : contraint.thenParams) {
			param.format
		}
		
	}
	
	def dispatch void format(Param param, extension IFormattableDocument document) {
		interior(
			param.regionFor.keyword('{').append[newLine],
			param.regionFor.keyword('}'),
			[indent]
		)
		
		
	}
	
	def dispatch void format(SMCubesTestModule testModule, extension IFormattableDocument document) {
		interior(
			testModule.regionFor.keyword('{').append[newLine],
			testModule.regionFor.keyword('}'),
			[indent]
		)
		
		for (test : testModule.tests) {
			test.format
		}
	}

	def dispatch void format(SMCubesTest test, extension IFormattableDocument document) {
		interior(
			test.regionFor.keyword('{').append[newLine],
			test.regionFor.keyword('}').append[newLine],
			[indent]
		)
		
		test.regionFor.crossRef(SMCubesTestAccess.testDefinitionE2ETestDefinitionCrossReference_4_1_0).append[newLine]
		
		
		test.inputData.format
	}

	def dispatch void format(SMCubesTestInputData inputData, extension IFormattableDocument document) {
		interior(
			inputData.regionFor.keyword('{').append[newLine],
			inputData.regionFor.keyword('}').append[newLine],
			[indent]
		)
	
		for (data : inputData.smcubes_inputdata) {
			data.format
		}
	}
	
	def dispatch void format(BaseColumnStructuredData data, extension IFormattableDocument document) {
		interior(
			data.regionFor.keyword('{').append[newLine],
			data.regionFor.keyword('}').append[newLine],
			[indent]
		)
		

		for (row : data.rows) {
			row.format
		}
	}
	
	def dispatch void format(BaseRowData row, extension IFormattableDocument document) {
		interior(
			row.regionFor.keyword('{').append[newLine],
			row.regionFor.keyword('}').append[newLine],
			[indent]
		)
		

		for (cell : row.cells) {
			cell.format
		}
	}
	
	def dispatch void format(BaseCell cell, extension IFormattableDocument document) {
		interior(
			cell.regionFor.keyword('{').append[newLine],
			cell.regionFor.keyword('}').append[newLine],
			[indent]
		)
	
		
		}
		
	def dispatch void format(BaseCellWithEnumeratedValue cell, extension IFormattableDocument document) {
		interior(
			cell.regionFor.keyword('{').append[newLine],
			cell.regionFor.keyword('}').append[newLine],
			[indent]
		)
		
		cell.regionFor.assignment(baseCellWithEnumeratedValueAccess.cellIDAssignment_2).append[newLine]
		cell.regionFor.assignment(baseCellWithEnumeratedValueAccess.columnAssignment_4_1).append[newLine]
		cell.regionFor.crossRef(baseCellWithEnumeratedValueAccess.columnVARIABLECrossReference_4_1_0).append[newLine]
		cell.regionFor.crossRef(baseCellWithEnumeratedValueAccess.valueMEMBERCrossReference_5_1_0).append[newLine]
		
		
	}
	
	def dispatch void format(BaseCellWithValue cell, extension IFormattableDocument document) {
		interior(
			cell.regionFor.keyword('{').append[newLine],
			cell.regionFor.keyword('}').append[newLine],
			[indent]
		)
		
		cell.regionFor.assignment(baseCellWithValueAccess.cellIDAssignment_2).append[newLine]
		cell.regionFor.assignment(baseCellWithValueAccess.columnAssignment_5_1).append[newLine]
		cell.regionFor.crossRef(baseCellWithValueAccess.columnVARIABLECrossReference_5_1_0).append[newLine]
		cell.regionFor.assignment(baseCellWithValueAccess.valueAssignment_4_1).append[newLine]

		
	}

	def dispatch void format(SmcubesModel smcubesModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		interior(
			smcubesModel.regionFor.keyword('{').append[newLine],
			smcubesModel.regionFor.keyword('}'),
			[indent]
		)

		for (domainModule : smcubesModel.domains) {
			domainModule.format
		}
		for (memberModule : smcubesModel.members) {
			memberModule.format
		}
		for (variableModule : smcubesModel.variables) {
			variableModule.format
		}
		for (cubeModule : smcubesModel.cubes) {
			cubeModule.format
		}
		for (combinationModule : smcubesModel.combinations) {
			combinationModule.format
		}
		for (transformationSchemeModule : smcubesModel.functionalModules) {
			transformationSchemeModule.format
		}
		for (mappingDefinitionModule : smcubesModel.mappings) {
			mappingDefinitionModule.format
		}
	}

	def dispatch void format(DomainModule domainModule, extension IFormattableDocument document) {
		interior(
			domainModule.regionFor.keyword('{').append[newLine],
			domainModule.regionFor.keyword('}'),
			[indent]
		)
		domainModule.regionFor.keyword(",").append[newLine]
		for (domain : domainModule.domains) {
			domain.format
		}
	}

	def dispatch void format(DOMAIN domain, extension IFormattableDocument document) {
		interior(
			domain.regionFor.keyword('{').append[newLine],
			domain.regionFor.keyword('}').append[newLine],
			[indent]
		)
		
		
		domain.regionFor.assignment(DOMAINAccess.codeAssignment_6_1).append[newLine]
		domain.regionFor.assignment(DOMAINAccess.domain_idAssignment_9_1).append[newLine]
		domain.regionFor.assignment(DOMAINAccess.data_typeAssignment_7_1).append[newLine]
		domain.regionFor.assignment(DOMAINAccess.descriptionAssignment_8_1).append[newLine]
		domain.regionFor.assignment(DOMAINAccess.displayNameAssignment_10_1).append[newLine]
		domain.regionFor.assignment(DOMAINAccess.facet_idAssignment_11_1).append[newLine]
		domain.regionFor.assignment(DOMAINAccess.is_enumeratedAssignment_1).append[newLine]
		domain.regionFor.assignment(DOMAINAccess.is_referenceAssignment_2).append[newLine]
		domain.regionFor.assignment(DOMAINAccess.maintenance_agency_idAssignment_12_1).append[newLine]
		
	}

	def dispatch void format(MemberModule memberModule, extension IFormattableDocument document) {
		interior(
			memberModule.regionFor.keyword('{').append[newLine],
			memberModule.regionFor.keyword('}'),
			[indent]
		)
		memberModule.regionFor.keyword(',').append[newLine]
		for (member : memberModule.members) {
			member.format
		}
	}

	def dispatch void format(MEMBER member, extension IFormattableDocument document) {
		interior(
			member.regionFor.keyword('{').append[newLine],
			member.regionFor.keyword('}').append[newLine],
			[indent]
		)
		member.regionFor.assignment(MEMBERAccess.codeAssignment_4_1).append[newLine]
		member.regionFor.assignment(MEMBERAccess.descriptionAssignment_5_1).append[newLine]
		member.regionFor.assignment(MEMBERAccess.displayNameAssignment_7_1).append[newLine]
		member.regionFor.crossRef(MEMBERAccess.domain_idDOMAINCrossReference_8_1_0).append[newLine]
		member.regionFor.assignment(MEMBERAccess.maintenance_agency_idAssignment_9_1).append[newLine]
		member.regionFor.assignment(MEMBERAccess.member_idAssignment_6_1).append[newLine]
		member.regionFor.keyword(',').append[newLine]

	}

	def dispatch void format(VariableModule variableModule, extension IFormattableDocument document) {
		interior(
			variableModule.regionFor.keyword('{').append[newLine],
			variableModule.regionFor.keyword('}'),
			[indent]
		)

		variableModule.regionFor.keyword(',').append[newLine]
		for (variable : variableModule.variables) {
			variable.format

		}
	}

	def dispatch void format(VARIABLE variable, extension IFormattableDocument document) {
		interior(
			variable.regionFor.keyword('{').append[newLine],
			variable.regionFor.keyword('}').append[newLine],
			[indent]
		)
		variable.regionFor.assignment(VARIABLEAccess.codeAssignment_4_1).append[newLine]
		variable.regionFor.assignment(VARIABLEAccess.descriptionAssignment_5_1).append[newLine]
		variable.regionFor.assignment(VARIABLEAccess.displayNameAssignment_8_1).append[newLine]
		variable.regionFor.crossRef(VARIABLEAccess.domain_idDOMAINCrossReference_9_1_0).append[newLine]
		variable.regionFor.assignment(VARIABLEAccess.maintenance_agency_idAssignment_10_1).append[newLine]
		variable.regionFor.assignment(VARIABLEAccess.primary_conceptAssignment_6_1).append[newLine]
		variable.regionFor.assignment(VARIABLEAccess.variable_idAssignment_7_1).append[newLine]

		

	}

	def dispatch void format(CubeModule cubeModule, extension IFormattableDocument document) {
		interior(
			cubeModule.regionFor.keyword('{').append[newLine],
			cubeModule.regionFor.keyword('}'),
			[indent]
		)
	

		for (cube : cubeModule.cubes) {
			cube.format
		}
		for (cube_structure_item : cubeModule.cubeStructureItems) {
			cube_structure_item.format
		}
		for (cube_structure : cubeModule.cubeStructures) {
			cube_structure.format
		}

	}

	def dispatch void format(CUBE cube, extension IFormattableDocument document) {
		interior(
			cube.regionFor.keyword('{').append[newLine],
			cube.regionFor.keyword('}').append[newLine],
			[indent]
		)
		cube.regionFor.assignment(CUBEAccess.codeAssignment_6_1).append[newLine]
		cube.regionFor.crossRef(CUBEAccess.cube_structure_idCUBE_STRUCTURECrossReference_14_1_0).append[newLine]
		cube.regionFor.assignment(CUBEAccess.cube_idAssignment_7_1).append[newLine]
		cube.regionFor.assignment(CUBEAccess.cube_typeAssignment_8_1).append[newLine]
		cube.regionFor.assignment(CUBEAccess.descriptionAssignment_9_1).append[newLine]
		cube.regionFor.assignment(CUBEAccess.displayNameAssignment_13_1).append[newLine]
		cube.regionFor.assignment(CUBEAccess.framework_idAssignment_15_1).append[newLine]
		cube.regionFor.assignment(CUBEAccess.is_allowedAssignment_1).append[newLine]
		cube.regionFor.assignment(CUBEAccess.maintenance_agency_idAssignment_16_1).append[newLine]
		cube.regionFor.assignment(CUBEAccess.valid_fromAssignment_10_1).append[newLine]
		cube.regionFor.assignment(CUBEAccess.valid_toAssignment_11_1).append[newLine]
		cube.regionFor.assignment(CUBEAccess.versionAssignment_12_1).append[newLine]

		

	}

	def dispatch void format(CUBE_STRUCTURE_ITEM cube_structure_item, extension IFormattableDocument document) {
		interior(
			cube_structure_item.regionFor.keyword('{').append[newLine],
			cube_structure_item.regionFor.keyword('}').append[newLine],
			[indent]
		)
		cube_structure_item.regionFor.crossRef(
			CUBE_STRUCTURE_ITEMAccess.attribute_associated_variableVARIABLECrossReference_11_1_0).append[newLine]
		cube_structure_item.regionFor.crossRef(
			CUBE_STRUCTURE_ITEMAccess.cube_structure_idCUBE_STRUCTURECrossReference_12_1_0).append[newLine]
		cube_structure_item.regionFor.assignment(CUBE_STRUCTURE_ITEMAccess.cube_variable_codeAssignment_10_1).append [
			newLine
		]
		cube_structure_item.regionFor.assignment(CUBE_STRUCTURE_ITEMAccess.descriptionAssignment_6_1).append[newLine]
		cube_structure_item.regionFor.assignment(CUBE_STRUCTURE_ITEMAccess.dimension_typeAssignment_7_1).append[newLine]
		cube_structure_item.regionFor.assignment(CUBE_STRUCTURE_ITEMAccess.is_flowAssignment_1).append[newLine]
		cube_structure_item.regionFor.assignment(CUBE_STRUCTURE_ITEMAccess.is_mandatoryAssignment_2).append[newLine]
		cube_structure_item.regionFor.assignment(CUBE_STRUCTURE_ITEMAccess.isIdentifierAssignment_3).append[newLine]
		cube_structure_item.regionFor.assignment(CUBE_STRUCTURE_ITEMAccess.member_idAssignment_13_1).append[newLine]
		cube_structure_item.regionFor.assignment(CUBE_STRUCTURE_ITEMAccess.orderAssignment_8_1).append[newLine]
		cube_structure_item.regionFor.assignment(CUBE_STRUCTURE_ITEMAccess.roleAssignment_9_1).append[newLine]
		cube_structure_item.regionFor.assignment(CUBE_STRUCTURE_ITEMAccess.subdomain_idAssignment_14_1).append[newLine]
		cube_structure_item.regionFor.crossRef(CUBE_STRUCTURE_ITEMAccess.variable_idVARIABLECrossReference_15_1_0).
			append[newLine]
		cube_structure_item.regionFor.crossRef(
			CUBE_STRUCTURE_ITEMAccess.variable_set_idVARIABLE_SETCrossReference_16_1_0).append[newLine]

	

	}

	def dispatch void format(CUBE_STRUCTURE cube_structure, extension IFormattableDocument document) {
		interior(
			cube_structure.regionFor.keyword('{').append[newLine],
			cube_structure.regionFor.keyword('}').append[newLine],
			[indent]
		)

		cube_structure.regionFor.assignment(CUBE_STRUCTUREAccess.codeAssignment_4_1).append[newLine]
		cube_structure.regionFor.assignment(CUBE_STRUCTUREAccess.cube_structure_idAssignment_5_1).append[newLine]
		cube_structure.regionFor.assignment(CUBE_STRUCTUREAccess.descriptionAssignment_6_1).append[newLine]
		cube_structure.regionFor.assignment(CUBE_STRUCTUREAccess.displayNameAssignment_10_1).append[newLine]
		cube_structure.regionFor.assignment(CUBE_STRUCTUREAccess.maintenance_agency_idAssignment_11_1).append[newLine]
		cube_structure.regionFor.assignment(CUBE_STRUCTUREAccess.valid_fromAssignment_7_1).append[newLine]
		cube_structure.regionFor.assignment(CUBE_STRUCTUREAccess.valid_toAssignment_8_1).append[newLine]
		cube_structure.regionFor.assignment(CUBE_STRUCTUREAccess.versionAssignment_9_1).append[newLine]

		

	}

	def dispatch void format(CombinationModule combinationModule, extension IFormattableDocument document) {
		interior(
			combinationModule.regionFor.keyword('{').append[newLine],
			combinationModule.regionFor.keyword('}'),
			[indent]
		)
		combinationModule.regionFor.keyword(',').append[newLine]
		for (combination : combinationModule.combinations) {
			// combination.format
		}
	}

	def dispatch void format(TransformationSchemeModule transformationSchemeModule,
		extension IFormattableDocument document) {
		interior(
			transformationSchemeModule.regionFor.keyword('{').append[newLine],
			transformationSchemeModule.regionFor.keyword('}'),
			[indent]
		)
		transformationSchemeModule.regionFor.keyword(',').append[newLine]
		for (scheme : transformationSchemeModule.schemes) {
			scheme.format

		}
	}
	
	def dispatch void format(TRANSFORMATION_SCHEME transformationScheme,
		extension IFormattableDocument document) {
		interior(
			transformationScheme.regionFor.keyword('{').append[newLine],
			transformationScheme.regionFor.keyword('}'),
			[indent]
		)
		transformationScheme.regionFor.assignment(TRANSFORMATION_SCHEMEAccess.codeAssignment_6_1).append[newLine]
		transformationScheme.regionFor.assignment(TRANSFORMATION_SCHEMEAccess.descriptionAssignment_5_1).append[newLine]
		transformationScheme.regionFor.assignment(TRANSFORMATION_SCHEMEAccess.displayNameAssignment_10_1).append[newLine]
		transformationScheme.regionFor.assignment(TRANSFORMATION_SCHEMEAccess.transformation_scheme_idAssignment_4_1).append[newLine]
		transformationScheme.regionFor.assignment(TRANSFORMATION_SCHEMEAccess.valid_fromAssignment_9_1).append[newLine]
		transformationScheme.regionFor.assignment(TRANSFORMATION_SCHEMEAccess.valid_toAssignment_8_1).append[newLine]
		
	}
	

	def dispatch void format(MappingDefinitionModule mappingDefinitionModule, extension IFormattableDocument document) {
		interior(
			mappingDefinitionModule.regionFor.keyword('{').append[newLine],
			mappingDefinitionModule.regionFor.keyword('}'),
			[indent]
		)
		
		for (mapping : mappingDefinitionModule.mappings) {
			// mapping.format
		}
	}

}
