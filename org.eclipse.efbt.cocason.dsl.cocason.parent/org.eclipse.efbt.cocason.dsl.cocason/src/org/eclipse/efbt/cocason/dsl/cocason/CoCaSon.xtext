// automatically generated by Xtext
grammar org.eclipse.efbt.cocason.dsl.cocason.CoCaSon with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/efbt/platform_call"
import "http://www.eclipse.org/efbt/cocamo"  as cocamo
import "http://www.eclipse.org/efbt/functionality_module" as functionality_module
import "http://www.eclipse.org/efbt/scenarios" as scenarios
import "http://www.eclipse.org/efbt/core" as core
import "http://www.eclipse.org/efbt/module_management" as module_management
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/efbt/reports" as reports
import "http://www.eclipse.org/efbt/smcubes_model" as smcubes_model
import "http://www.eclipse.org/efbt/test_definition" as test_definition
import "http://www.eclipse.org/efbt/requirements_text" as requirements_text
import "http://www.eclipse.org/efbt/data_definition" as data_definition
import "http://www.eclipse.org/efbt/test" as test
import "http://www.eclipse.org/efbt/efbt_data_definition" as efbt_data_definition
import "http://www.eclipse.org/efbt/efbt_vtl_transformation" as efbt_vtl_transformation
import "http://www.eclipse.org/efbt/efbt_mapping" as efbt_mapping
import "http://www.eclipse.org/efbt/vtl_transformation" as vtl_transformation
import "http://www.eclipse.org/efbt/mapping" as mapping
import "http://www.eclipse.org/efbt/base_column_structured_data" as base_column_structured_data
import "http://www.eclipse.org/efbt/test_input_data" as test_input_data
import "http://www.eclipse.org/efbt/column_structured_data" as column_structured_data
import "http://www.eclipse.org/efbt/attribute_lineage" as attribute_lineage
import "http://www.eclipse.org/efbt/data_lineage" as data_lineage
import "http://www.eclipse.org/efbt/functions" as functions
import "http://www.eclipse.org/efbt/column_transformation_logic" as column_transformation_logic
import "http://www.eclipse.org/efbt/row_transformation_logic" as row_transformation_logic
import "http://www.eclipse.org/efbt/cubes" as cubes
import "http://www.eclipse.org/efbt/cube_transformation_logic" as cube_transformation_logic 
import "http://www.eclipse.org/efbt/cell_transformation_logic" as cell_transformation_logic


SMCubesProgram returns SMCubesProgram:
	{SMCubesProgram}
	'SMCubesProgram'
	'{'
		('smcubesStaticModel' smcubesStaticModel=SMCubesStaticModel)?
		('platformCalls' platformCalls=PlatformCallModule)?
		('executableLogic' executableLogic=ExecutableLogic)?
	'}';













PlatformCall returns PlatformCall:
	PlatformCall_Impl | TranslateBIRDWithOldTestFormatToCocason | ConvertSQLDeveloperModelToEcore | TranslateBIRDWithNewTestFormatToCocason | CreateAttributeLineageModel | CreateDataLineageModel;










TestDefinition returns test_definition::TestDefinition:
	TestDefinition_Impl | E2ETestDefinition | UnitTestDefinition;




FunctionalityModule returns functionality_module::FunctionalityModule:
	DataProcessingFunctionalityModule | LeafFunctionalityModule_Impl | ParallelFunctionalityModule | ScenarioSetFunctionalityModule | SerialFunctionalityModule | FunctionalityModuleSet_Impl | ReadDataSourceFunctionalityModule | ReportCellCreationFunctionalityModule | ValidationFunctionalityModule;























RequirementsSection returns requirements_text::RequirementsSection:
	RequirementsSectionImage | RequirementsSectionLinkWithText | RequirementsSectionText | TitledRequirementsSection;














BaseCell returns base_column_structured_data::BaseCell:
	BaseCellWithEnumeratedValue | BaseCellWithValue;








FunctionSpec returns functions::FunctionSpec:
	FunctionSpec_Impl | AggregateFunctionSpec | BasicFunctionSpec;



CubeColumn returns column_transformation_logic::CubeColumn:
	CubeColumn_Impl | AggregateColumnFunction | BasicColumnFunction | ColumnFunction_Impl;



ColumnFunction returns column_transformation_logic::ColumnFunction:
	ColumnFunction_Impl | AggregateColumnFunction | BasicColumnFunction;

RowCreationApproach returns row_transformation_logic::RowCreationApproach:
	RowCreationApproach_Impl | CustomRowCreationApproach | FilterAndGroupToOneRowCreationApproach | OneToOneRowCreationApproach | FilterRowCreationApproach | GroupByRowCreationApproach | RowJoinFunction | UnionRowCreationApproach;

FreeBirdToolsCube returns cubes::FreeBirdToolsCube:
	FreeBirdToolsCube_Impl | BaseCube | DerivedCube_Impl | TargetCube;


BasicFunction returns functions::BasicFunction:
	BasicFunction_Impl | BooleanFunction;

Parameter returns functions::Parameter:
	Parameter_Impl | AggregateFunction | BasicFunction_Impl | BooleanFunction | Function_Impl;







DerivedCube returns cubes::DerivedCube:
	DerivedCube_Impl | TargetCube;




Function returns functions::Function:
	Function_Impl | AggregateFunction | BasicFunction_Impl | BooleanFunction;

SMCubesStaticModel returns cocamo::SMCubesStaticModel:
	{cocamo::SMCubesStaticModel}
	'SMCubesStaticModel'
	name=EString
	'{'
		('smCubesModel' smCubesModel=SmcubesModel)?
		('requirements' requirements=RequirementsModule)?
		('testDefinitions' testDefinitions=TestDefinitionModule)?
		('tests' tests=SMCubesTestModule)?
		('testTemplates' testTemplates=TestTemplateModule)?
		('testConstriants' testConstriants=TestContraints)?
		('functionalityModules' functionalityModules=FunctionalityModuleModule)?
	'}';

PlatformCallModule returns PlatformCallModule:
	{PlatformCallModule}
	'PlatformCallModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('platformCalls' '{' platformCalls+=PlatformCall ( "," platformCalls+=PlatformCall)* '}' )?
	'}';

ExecutableLogic returns ExecutableLogic:
	{ExecutableLogic}
	'ExecutableLogic'
	;

EString returns ecore::EString:
	STRING | ID;

SmcubesModel returns smcubes_model::SmcubesModel:
	{smcubes_model::SmcubesModel}
	'SmcubesModel'
	name=EString
	'{'
		('domains' '{' domains+=DomainModule ( "," domains+=DomainModule)* '}' )?
		('members' '{' members+=MemberModule ( "," members+=MemberModule)* '}' )?
		('variables' '{' variables+=VariableModule ( "," variables+=VariableModule)* '}' )?
		('cubes' '{' cubes+=CubeModule ( "," cubes+=CubeModule)* '}' )?
		('combinations' '{' combinations+=CombinationModule ( "," combinations+=CombinationModule)* '}' )?
		('functionalModules' '{' functionalModules+=TransformationSchemeModule ( "," functionalModules+=TransformationSchemeModule)* '}' )?
		('mappings' '{' mappings+=MappingDefinitionModule ( "," mappings+=MappingDefinitionModule)* '}' )?
	'}';

RequirementsModule returns requirements_text::RequirementsModule:
	{requirements_text::RequirementsModule}
	'RequirementsModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('rules' '{' rules+=TitledRequirementsSection ( "," rules+=TitledRequirementsSection)* '}' )?
		('allowedtypes' allowedtypes=AllowedTypes)?
	'}';

TestDefinitionModule returns test_definition::TestDefinitionModule:
	{test_definition::TestDefinitionModule}
	'TestDefinitionModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('testDefinitions' '{' testDefinitions+=TestDefinition ( "," testDefinitions+=TestDefinition)* '}' )?
	'}';

SMCubesTestModule returns cocamo::SMCubesTestModule:
	{cocamo::SMCubesTestModule}
	'SMCubesTestModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('tests' '{' tests+=SMCubesTest ( "," tests+=SMCubesTest)* '}' )?
	'}';

TestTemplateModule returns test_definition::TestTemplateModule:
	{test_definition::TestTemplateModule}
	'TestTemplateModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('templates' '{' templates+=TestTemplate ( "," templates+=TestTemplate)* '}' )?
	'}';

TestContraints returns test_definition::TestContraints:
	{test_definition::TestContraints}
	'TestContraints'
	name=EString
	'{'
		('template' template=[test_definition::TestTemplate|EString])?
		('givenParams' '{' givenParams+=Param ( "," givenParams+=Param)* '}' )?
		('whenParams' '{' whenParams+=Param ( "," whenParams+=Param)* '}' )?
		('thenParams' '{' thenParams+=Param ( "," thenParams+=Param)* '}' )?
	'}';

FunctionalityModuleModule returns functionality_module::FunctionalityModuleModule:
	{functionality_module::FunctionalityModuleModule}
	'FunctionalityModuleModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('FunctionalityModules' '{' FunctionalityModules+=FunctionalityModule ( "," FunctionalityModules+=FunctionalityModule)* '}' )?
	'}';

DomainModule returns efbt_data_definition::DomainModule:
	{efbt_data_definition::DomainModule}
	'DomainModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('domains' '{' domains+=DOMAIN ( "," domains+=DOMAIN)* '}' )?
	'}';

MemberModule returns efbt_data_definition::MemberModule:
	{efbt_data_definition::MemberModule}
	'MemberModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('members' '{' members+=MEMBER ( "," members+=MEMBER)* '}' )?
	'}';

VariableModule returns efbt_data_definition::VariableModule:
	{efbt_data_definition::VariableModule}
	'VariableModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('variables' '{' variables+=VARIABLE ( "," variables+=VARIABLE)* '}' )?
	'}';

CubeModule returns efbt_data_definition::CubeModule:
	{efbt_data_definition::CubeModule}
	'CubeModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('cubes' '{' cubes+=CUBE ( "," cubes+=CUBE)* '}' )?
		('cubeStructures' '{' cubeStructures+=CUBE_STRUCTURE ( "," cubeStructures+=CUBE_STRUCTURE)* '}' )?
		('cubeStructureItems' '{' cubeStructureItems+=CUBE_STRUCTURE_ITEM ( "," cubeStructureItems+=CUBE_STRUCTURE_ITEM)* '}' )?
	'}';

CombinationModule returns efbt_data_definition::CombinationModule:
	{efbt_data_definition::CombinationModule}
	'CombinationModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('combinations' '{' combinations+=COMBINATION ( "," combinations+=COMBINATION)* '}' )?
		('combination_items' '{' combination_items+=COMBINATION_ITEM ( "," combination_items+=COMBINATION_ITEM)* '}' )?
		('cubeToCombinationLinks' '{' cubeToCombinationLinks+=CUBE_TO_COMBINATION ( "," cubeToCombinationLinks+=CUBE_TO_COMBINATION)* '}' )?
	'}';

TransformationSchemeModule returns efbt_vtl_transformation::TransformationSchemeModule:
	{efbt_vtl_transformation::TransformationSchemeModule}
	'TransformationSchemeModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('schemes' '{' schemes+=TRANSFORMATION_SCHEME ( "," schemes+=TRANSFORMATION_SCHEME)* '}' )?
	'}';

MappingDefinitionModule returns efbt_mapping::MappingDefinitionModule:
	{efbt_mapping::MappingDefinitionModule}
	'MappingDefinitionModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('mappings' '{' mappings+=MAPPING_DEFINITION ( "," mappings+=MAPPING_DEFINITION)* '}' )?
	'}';

ModuleDependencies returns module_management::ModuleDependencies:
	{module_management::ModuleDependencies}
	'ModuleDependencies'
	'{'
		('theModules' '{' theModules+=ModuleDependency ( "," theModules+=ModuleDependency)* '}' )?
	'}';

ModuleLongName returns module_management::ModuleLongName:
	{module_management::ModuleLongName}
	'ModuleLongName'
	name=EString;

DOMAIN returns core::DOMAIN:
	{core::DOMAIN}
	(is_enumerated?='is_enumerated')?
	(is_reference?='is_reference')?
	'DOMAIN'
	name=EString
	'{'
		('code' code=EString)?
		('data_type' data_type=FACET_VALUE_TYPE)?
		('description' description=EString)?
		('domain_id' domain_id=EString)?
		('displayName' displayName=EString)?
		('facet_id' facet_id=[core::FACET_COLLECTION|EString])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

ModuleDependency returns module_management::ModuleDependency:
	{module_management::ModuleDependency}
	'ModuleDependency'
	'{'
		('moduleName' moduleName=EString)?
		('moduleVersion' moduleVersion=EString)?
		('theModule' theModule=[module_management::Module|EString])?
		('longName' longName=[module_management::ModuleLongName|EString])?
	'}';

enum FACET_VALUE_TYPE returns core::FACET_VALUE_TYPE:
				BigInteger = 'BigInteger' | Boolean = 'Boolean' | DateTime = 'DateTime' | DayMonthDayMonth = 'DayMonthDayMonth' | Decimal = 'Decimal' | Double = 'Double' | Duration = 'Duration' | Float = 'Float' | GregorianDay = 'GregorianDay' | GregorianMonth = 'GregorianMonth' | GregorianYear = 'GregorianYear' | Integer = 'Integer' | Long = 'Long' | Short = 'Short' | String = 'String' | Time = 'Time' | URI = 'URI';

FACET_COLLECTION returns core::FACET_COLLECTION:
	{core::FACET_COLLECTION}
	'FACET_COLLECTION'
	facet_id=EString
	'{'
		('code' code=EString)?
		('facet_value_type' facet_value_type=FACET_VALUE_TYPE)?
		('name' name=EString)?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MAINTENANCE_AGENCY returns core::MAINTENANCE_AGENCY:
	{core::MAINTENANCE_AGENCY}
	'MAINTENANCE_AGENCY'
	name=EString
	'{'
		('code' code=EString)?
		('maintenance_agency_id' maintenance_agency_id=EString)?
	'}';

MEMBER returns core::MEMBER:
	{core::MEMBER}
	'MEMBER'
	name=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('member_id' member_id=EString)?
		('displayName' displayName=EString)?
		('domain_id' domain_id=[core::DOMAIN|EString])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

VARIABLE returns core::VARIABLE:
	{core::VARIABLE}
	'VARIABLE'
	name=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('primary_concept' primary_concept=EString)?
		('variable_id' variable_id=EString)?
		('displayName' displayName=EString)?
		('domain_id' domain_id=[core::DOMAIN|EString])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

CUBE returns data_definition::CUBE:
	{data_definition::CUBE}
	(is_allowed?='is_allowed')?
	(published?='published')?
	'CUBE'
	name=EString
	'{'
		('code' code=EString)?
		('cube_id' cube_id=EString)?
		('cube_type' cube_type=EString)?
		('description' description=EString)?
		('valid_from' valid_from=EDate)?
		('valid_to' valid_to=EDate)?
		('version' version=EString)?
		('displayName' displayName=EString)?
		('cube_structure_id' cube_structure_id=[data_definition::CUBE_STRUCTURE|EString])?
		('framework_id' framework_id=[data_definition::FRAMEWORK|EString])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

CUBE_STRUCTURE returns data_definition::CUBE_STRUCTURE:
	{data_definition::CUBE_STRUCTURE}
	'CUBE_STRUCTURE'
	name=EString
	'{'
		('code' code=EString)?
		('cube_structure_id' cube_structure_id=EString)?
		('description' description=EString)?
		('valid_from' valid_from=EDate)?
		('valid_to' valid_to=EDate)?
		('version' version=EString)?
		('displayName' displayName=EString)?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

CUBE_STRUCTURE_ITEM returns data_definition::CUBE_STRUCTURE_ITEM:
	{data_definition::CUBE_STRUCTURE_ITEM}
	(is_flow?='is_flow')?
	(is_mandatory?='is_mandatory')?
	(isIdentifier?='isIdentifier')?
	'CUBE_STRUCTURE_ITEM'
	'{'
		('description' description=EString)?
		('dimension_type' dimension_type=TYP_DMNSN)?
		('order' order=EInt)?
		('role' role=TYP_RL)?
		('cube_variable_code' cube_variable_code=EString)?
		('attribute_associated_variable' attribute_associated_variable=[core::VARIABLE|EString])?
		('cube_structure_id' cube_structure_id=[data_definition::CUBE_STRUCTURE|EString])?
		('member_id' member_id=[core::MEMBER|EString])?
		('subdomain_id' subdomain_id=[core::SUBDOMAIN|EString])?
		('variable_id' variable_id=[core::VARIABLE|EString])?
		('variable_set_id' variable_set_id=[core::VARIABLE_SET|EString])?
	'}';

FRAMEWORK returns data_definition::FRAMEWORK:
	{data_definition::FRAMEWORK}
	'FRAMEWORK'
	framework_id=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('name' name=EString)?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';



enum TYP_DMNSN returns data_definition::TYP_DMNSN:
				B = 'B' | M = 'M' | T = 'T' | U = 'U';

EInt returns ecore::EInt:
	'-'? INT;

enum TYP_RL returns data_definition::TYP_RL:
				O = 'O' | A = 'A' | D = 'D';

SUBDOMAIN returns core::SUBDOMAIN:
	{core::SUBDOMAIN}
	(is_listed?='is_listed')?
	(is_natural?='is_natural')?
	'SUBDOMAIN'
	subdomain_id=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('name' name=EString)?
		('domain_id' domain_id=[core::DOMAIN|EString])?
		('facet_id' facet_id=[core::FACET_COLLECTION|EString])?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

VARIABLE_SET returns core::VARIABLE_SET:
	{core::VARIABLE_SET}
	'VARIABLE_SET'
	variable_set_id=EString
	'{'
		('code' code=EString)?
		('description' description=EString)?
		('name' name=EString)?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
	'}';

COMBINATION returns data_definition::COMBINATION:
	{data_definition::COMBINATION}
	'COMBINATION'
	name=EString
	'{'
		('code' code=EString)?
		('combination_id' combination_id=EString)?
		('valid_from' valid_from=EDate)?
		('valid_to' valid_to=EDate)?
		('version' version=EString)?
		('maintenance_agency_id' maintenance_agency_id=[core::MAINTENANCE_AGENCY|EString])?
		('combination_items' '{' combination_items+=COMBINATION_ITEM ( "," combination_items+=COMBINATION_ITEM)* '}' )?
	'}';

COMBINATION_ITEM returns data_definition::COMBINATION_ITEM:
	{data_definition::COMBINATION_ITEM}
	'COMBINATION_ITEM'
	'{'
		('member_id' member_id=[core::MEMBER|EString])?
		('subdomain_id' subdomain_id=[core::SUBDOMAIN|EString])?
		('variable_id' variable_id=[core::VARIABLE|EString])?
		('variable_set_id' variable_set_id=[core::VARIABLE_SET|EString])?
	'}';

CUBE_TO_COMBINATION returns data_definition::CUBE_TO_COMBINATION:
	{data_definition::CUBE_TO_COMBINATION}
	'CUBE_TO_COMBINATION'
	'{'
		('combination_id' combination_id=[data_definition::COMBINATION|EString])?
		('cube_id' cube_id=[data_definition::CUBE|EString])?
	'}';

TRANSFORMATION_SCHEME returns vtl_transformation::TRANSFORMATION_SCHEME:
	{vtl_transformation::TRANSFORMATION_SCHEME}
	'TRANSFORMATION_SCHEME'
	name=EString
	'{'
		('transformation_scheme_id' transformation_scheme_id=EString)?
		('description' description=EString)?
		('code' code=EString)?
		('version' version=EString)?
		('valid_to' valid_to=EDate)?
		('valid_from' valid_from=EDate)?
		('displayName' displayName=EString)?
	'}';

MAPPING_DEFINITION returns mapping::MAPPING_DEFINITION:
	{mapping::MAPPING_DEFINITION}
	'MAPPING_DEFINITION'
	mapping_id=EString
	'{'
		('name' name=EString)?
		('code' code=EString)?
		('maintenance_agency_id' maintenance_agency_id=EString)?
		('mapping_type' mapping_type=EString)?
		('memberMapping' memberMapping=[mapping::MEMBER_MAPPING|EString])?
		('variableMapping' variableMapping=[mapping::VARIABLE_MAPPING|EString])?
	'}';

MEMBER_MAPPING returns mapping::MEMBER_MAPPING:
	{mapping::MEMBER_MAPPING}
	'MEMBER_MAPPING'
	member_mapping_id=EString
	'{'
		('name' name=EString)?
		('code' code=EString)?
		('maintenance_agency_id' maintenance_agency_id=EString)?
		('memberMappingItems' '{' memberMappingItems+=MEMBER_MAPPING_ITEM ( "," memberMappingItems+=MEMBER_MAPPING_ITEM)* '}' )?
	'}';

VARIABLE_MAPPING returns mapping::VARIABLE_MAPPING:
	{mapping::VARIABLE_MAPPING}
	'VARIABLE_MAPPING'
	variable_mapping_id=EString
	'{'
		('name' name=EString)?
		('code' code=EString)?
		('maintenance_agency_id' maintenance_agency_id=EString)?
		('varaibleMappingItems' '{' varaibleMappingItems+=VARIABLE_MAPPING_ITEM ( "," varaibleMappingItems+=VARIABLE_MAPPING_ITEM)* '}' )?
	'}';

MEMBER_MAPPING_ITEM returns mapping::MEMBER_MAPPING_ITEM:
	{mapping::MEMBER_MAPPING_ITEM}
	'MEMBER_MAPPING_ITEM'
	'{'
		('isSource' isSource=EString)?
		('member' member=[core::MEMBER|EString])?
		('variable' variable=[core::VARIABLE|EString])?
	'}';

VARIABLE_MAPPING_ITEM returns mapping::VARIABLE_MAPPING_ITEM:
	{mapping::VARIABLE_MAPPING_ITEM}
	'VARIABLE_MAPPING_ITEM'
	'{'
		('isSource' isSource=EString)?
		('variable' variable=[core::VARIABLE|EString])?
	'}';

TitledRequirementsSection returns requirements_text::TitledRequirementsSection:
	'TitledRequirementsSection'
	name=EString
	'{'
		('title' title=EString)?
		('referencingSections' referencingSections=[requirements_text::RequirementsSectionLinkWithText|EString])?
		'requirementsType' requirementsType=[requirements_text::RequirementType|EString]
		('sections' '{' sections+=RequirementsSection ( "," sections+=RequirementsSection)* '}' )?
	'}';

AllowedTypes returns requirements_text::AllowedTypes:
	{requirements_text::AllowedTypes}
	'AllowedTypes'
	'{'
		('allowedTypes' '{' allowedTypes+=RequirementType ( "," allowedTypes+=RequirementType)* '}' )?
	'}';

RequirementsSectionLinkWithText returns requirements_text::RequirementsSectionLinkWithText:
	{requirements_text::RequirementsSectionLinkWithText}
	'RequirementsSectionLinkWithText'
	name=EString
	'{'
		('linkText' linkText=EString)?
		('subsection' subsection=EString)?
		('linkedRuleSection' linkedRuleSection=[requirements_text::TitledRequirementsSection|EString])?
	'}';

RequirementType returns requirements_text::RequirementType:
	{requirements_text::RequirementType}
	'RequirementType'
	name=EString;

RequirementsSectionImage returns requirements_text::RequirementsSectionImage:
	{requirements_text::RequirementsSectionImage}
	'RequirementsSectionImage'
	name=EString
	'{'
		('style' style=EString)?
		('uri' uri=EString)?
	'}';

RequirementsSectionText returns requirements_text::RequirementsSectionText:
	{requirements_text::RequirementsSectionText}
	'RequirementsSectionText'
	name=EString
	'{'
		('text' text=EString)?
	'}';

TestDefinition_Impl returns test_definition::TestDefinition:
	{test_definition::TestDefinition}
	'TestDefinition'
	name=EString
	'{'
		('testContraints' testContraints=[test_definition::TestContraints|EString])?
		('given' given=Given)?
		('when' when=When)?
		('then' then=Then)?
	'}';

Given returns test_definition::Given:
	{test_definition::Given}
	'Given'
	'{'
		('text' text=[test_definition::ClauseText|EString])?
		('regulatoryTextLinks' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|EString] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|EString])* ')' )?
		('params' '{' params+=Param ( "," params+=Param)* '}' )?
	'}';

When returns test_definition::When:
	{test_definition::When}
	'When'
	'{'
		('text' text=[test_definition::ClauseText|EString])?
		('regulatoryTextLinks' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|EString] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|EString])* ')' )?
		('params' '{' params+=Param ( "," params+=Param)* '}' )?
	'}';

Then returns test_definition::Then:
	{test_definition::Then}
	'Then'
	'{'
		('text' text=[test_definition::ClauseText|EString])?
		('regulatoryTextLinks' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|EString] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|EString])* ')' )?
		('params' '{' params+=Param ( "," params+=Param)* '}' )?
	'}';

E2ETestDefinition returns test_definition::E2ETestDefinition:
	{test_definition::E2ETestDefinition}
	'E2ETestDefinition'
	name=EString
	'{'
		('testContraints' testContraints=[test_definition::TestContraints|EString])?
		('given' given=Given)?
		('when' when=When)?
		('then' then=Then)?
	'}';

UnitTestDefinition returns test_definition::UnitTestDefinition:
	{test_definition::UnitTestDefinition}
	'UnitTestDefinition'
	name=EString
	'{'
		('testContraints' testContraints=[test_definition::TestContraints|EString])?
		('given' given=Given)?
		('when' when=When)?
		('then' then=Then)?
	'}';

ClauseText returns test_definition::ClauseText:
	{test_definition::ClauseText}
	'ClauseText'
	name=EString;

Param returns test_definition::Param:
	{test_definition::Param}
	'Param'
	'{'
		('param' param=[ecore::EObject|EString])?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

SMCubesTest returns cocamo::SMCubesTest:
	{cocamo::SMCubesTest}
	'SMCubesTest'
	name=EString
	'{'
		('testDefinition' testDefinition=[test_definition::E2ETestDefinition|EString])?
		('expectedResults' expectedResults=[cocamo::SMCubesReportResults|EString])?
		('inputData' inputData=SMCubesTestInputData)?
	'}';

SMCubesTestInputData returns cocamo::SMCubesTestInputData:
	{cocamo::SMCubesTestInputData}
	'SMCubesTestInputData'
	name=EString
	'{'
		('smcubes_inputdata' '{' smcubes_inputdata+=BaseColumnStructuredData ( "," smcubes_inputdata+=BaseColumnStructuredData)* '}' )?
	'}';

SMCubesReportResults returns cocamo::SMCubesReportResults:
	{cocamo::SMCubesReportResults}
	'SMCubesReportResults'
	'{'
		('reportCells' '{' reportCells+=ReportCellValue ( "," reportCells+=ReportCellValue)* '}' )?
	'}';

BaseColumnStructuredData returns base_column_structured_data::BaseColumnStructuredData:
	{base_column_structured_data::BaseColumnStructuredData}
	'BaseColumnStructuredData'
	name=EString
	'{'
		('cube' cube=[data_definition::CUBE|EString])?
		('rows' '{' rows+=BaseRowData ( "," rows+=BaseRowData)* '}' )?
	'}';

BaseRowData returns base_column_structured_data::BaseRowData:
	{base_column_structured_data::BaseRowData}
	'BaseRowData'
	rowID=EString
	'{'
		('cells' '{' cells+=BaseCell ( "," cells+=BaseCell)* '}' )?
	'}';

BaseCellWithEnumeratedValue returns base_column_structured_data::BaseCellWithEnumeratedValue:
	{base_column_structured_data::BaseCellWithEnumeratedValue}
	'BaseCellWithEnumeratedValue'
	cellID=EString
	'{'
		('column' column=[core::VARIABLE|EString])?
		('value' value=[core::MEMBER|EString])?
	'}';

BaseCellWithValue returns base_column_structured_data::BaseCellWithValue:
	{base_column_structured_data::BaseCellWithValue}
	'BaseCellWithValue'
	cellID=EString
	'{'
		('value' value=EString)?
		('column' column=[core::VARIABLE|EString])?
	'}';

ReportCellValue returns reports::ReportCellValue:
	{reports::ReportCellValue}
	'ReportCellValue'
	'{'
		('reportCell' reportCell=[reports::ReportCell|EString])?
	'}';

ReportCell returns reports::ReportCell:
	{reports::ReportCell}
	'ReportCell'
	name=EString
	'{'
		('combination' combination=[data_definition::COMBINATION|EString])?
	'}';

TestTemplate returns test_definition::TestTemplate:
	{test_definition::TestTemplate}
	'TestTemplate'
	name=EString
	'{'
		('givenText' givenText=ClauseText)?
		('whenText' whenText=ClauseText)?
		('thenText' thenText=ClauseText)?
		('givenParams' '{' givenParams+=Param ( "," givenParams+=Param)* '}' )?
		('whenParams' '{' whenParams+=Param ( "," whenParams+=Param)* '}' )?
		('thenParams' '{' thenParams+=Param ( "," thenParams+=Param)* '}' )?
	'}';

Scenario returns scenarios::Scenario:
	{scenarios::Scenario}
	'Scenario'
	name=EString;

ScenarioSet returns scenarios::ScenarioSet:
	{scenarios::ScenarioSet}
	'ScenarioSet'
	name=EString
	'{'
		('scenarios' '{' scenarios+=Scenario ( "," scenarios+=Scenario)* '}' )?
	'}';

DataProcessingFunctionalityModule returns functionality_module::DataProcessingFunctionalityModule:
	{functionality_module::DataProcessingFunctionalityModule}
	'DataProcessingFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString])?
		('scenario' scenario=[scenarios::Scenario|EString])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';

LeafFunctionalityModule_Impl returns functionality_module::LeafFunctionalityModule:
	{functionality_module::LeafFunctionalityModule}
	'LeafFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString])?
		('scenario' scenario=[scenarios::Scenario|EString])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';

ParallelFunctionalityModule returns functionality_module::ParallelFunctionalityModule:
	{functionality_module::ParallelFunctionalityModule}
	'ParallelFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString])?
		('scenario' scenario=[scenarios::Scenario|EString])?
		('scenarioSet' scenarioSet=ScenarioSet)?
		('subTransformationsAndSchemes' '{' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* '}' )?
	'}';

ScenarioSetFunctionalityModule returns functionality_module::ScenarioSetFunctionalityModule:
	{functionality_module::ScenarioSetFunctionalityModule}
	'ScenarioSetFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString])?
		('scenario' scenario=[scenarios::Scenario|EString])?
		('scenarioSet' scenarioSet=ScenarioSet)?
		('subTransformationsAndSchemes' '{' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* '}' )?
		('scenarioSetChoice' scenarioSetChoice=ScenarioSet)?
	'}';

SerialFunctionalityModule returns functionality_module::SerialFunctionalityModule:
	{functionality_module::SerialFunctionalityModule}
	'SerialFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString])?
		('scenario' scenario=[scenarios::Scenario|EString])?
		('scenarioSet' scenarioSet=ScenarioSet)?
		('subTransformationsAndSchemes' '{' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* '}' )?
	'}';

FunctionalityModuleSet_Impl returns functionality_module::FunctionalityModuleSet:
	{functionality_module::FunctionalityModuleSet}
	'FunctionalityModuleSet'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString])?
		('scenario' scenario=[scenarios::Scenario|EString])?
		('scenarioSet' scenarioSet=ScenarioSet)?
		('subTransformationsAndSchemes' '{' subTransformationsAndSchemes+=FunctionalityModule ( "," subTransformationsAndSchemes+=FunctionalityModule)* '}' )?
	'}';

ReadDataSourceFunctionalityModule returns functionality_module::ReadDataSourceFunctionalityModule:
	{functionality_module::ReadDataSourceFunctionalityModule}
	'ReadDataSourceFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString])?
		('scenario' scenario=[scenarios::Scenario|EString])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';

ReportCellCreationFunctionalityModule returns functionality_module::ReportCellCreationFunctionalityModule:
	{functionality_module::ReportCellCreationFunctionalityModule}
	'ReportCellCreationFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString])?
		('scenario' scenario=[scenarios::Scenario|EString])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';

ValidationFunctionalityModule returns functionality_module::ValidationFunctionalityModule:
	{functionality_module::ValidationFunctionalityModule}
	'ValidationFunctionalityModule'
	name=EString
	'{'
		('usedTransformationOrScheme' usedTransformationOrScheme=[functionality_module::FunctionalityModule|EString])?
		('scenario' scenario=[scenarios::Scenario|EString])?
		('scenarioSet' scenarioSet=ScenarioSet)?
	'}';

PlatformCall_Impl returns PlatformCall:
	{PlatformCall}
	'PlatformCall'
	name=EString
	'{'
		('errorMessage' errorMessage=EString)?
		('returnStatus' returnStatus=EInt)?
	'}';

TranslateBIRDWithOldTestFormatToCocason returns TranslateBIRDWithOldTestFormatToCocason:
	{TranslateBIRDWithOldTestFormatToCocason}
	'TranslateBIRDWithOldTestFormatToCocason'
	name=EString
	'{'
		('errorMessage' errorMessage=EString)?
		('returnStatus' returnStatus=EInt)?
		('inputDirectory' inputDirectory=EString)?
		('outputDirectory' outputDirectory=EString)?
		('testDirectory' testDirectory=EString)?
	'}';

ConvertSQLDeveloperModelToEcore returns ConvertSQLDeveloperModelToEcore:
	{ConvertSQLDeveloperModelToEcore}
	'ConvertSQLDeveloperModelToEcore'
	name=EString
	'{'
		('errorMessage' errorMessage=EString)?
		('returnStatus' returnStatus=EInt)?
		('inputDirectory' inputDirectory=EString)?
	'}';

TranslateBIRDWithNewTestFormatToCocason returns TranslateBIRDWithNewTestFormatToCocason:
	{TranslateBIRDWithNewTestFormatToCocason}
	'TranslateBIRDWithNewTestFormatToCocason'
	name=EString
	'{'
		('errorMessage' errorMessage=EString)?
		('returnStatus' returnStatus=EInt)?
		('inputDirectory' inputDirectory=EString)?
		('outputDirectory' outputDirectory=EString)?
		('testDirectory' testDirectory=EString)?
	'}';

CreateAttributeLineageModel returns CreateAttributeLineageModel:
	{CreateAttributeLineageModel}
	'CreateAttributeLineageModel'
	name=EString
	'{'
		('errorMessage' errorMessage=EString)?
		('returnStatus' returnStatus=EInt)?
		('resultingALM' resultingALM=AttributeLineageModel)?
	'}';

CreateDataLineageModel returns CreateDataLineageModel:
	{CreateDataLineageModel}
	'CreateDataLineageModel'
	name=EString
	'{'
		('errorMessage' errorMessage=EString)?
		('returnStatus' returnStatus=EInt)?
		('inputALM' inputALM=[attribute_lineage::AttributeLineageModel|EString])?
		('resultingDLM' resultingDLM=DataLineageModel)?
	'}';

AttributeLineageModel returns attribute_lineage::AttributeLineageModel:
	{attribute_lineage::AttributeLineageModel}
	'AttributeLineageModel'
	name=EString
	'{'
		('rowTransformations' '{' rowTransformations+=CubeTransformationLogic ( "," rowTransformations+=CubeTransformationLogic)* '}' )?
		('baseSchemas' '{' baseSchemas+=BaseRowStructure ( "," baseSchemas+=BaseRowStructure)* '}' )?
		('specialFunctionSpecs' '{' specialFunctionSpecs+=FunctionSpec ( "," specialFunctionSpecs+=FunctionSpec)* '}' )?
	'}';

CubeTransformationLogic returns cube_transformation_logic::CubeTransformationLogic:
	{cube_transformation_logic::CubeTransformationLogic}
	(usedInSubsets?='usedInSubsets')?
	'CubeTransformationLogic'
	'{'
		('columnFunctionGroup' columnFunctionGroup=ColumnFunctionGroup)?
		('rowCreationApproachForCube' rowCreationApproachForCube=RowCreationApproachForCube)?
	'}';

BaseRowStructure returns row_transformation_logic::BaseRowStructure:
	{row_transformation_logic::BaseRowStructure}
	(usedInSubsets?='usedInSubsets')?
	'BaseRowStructure'
	'{'
		('cube' cube=[cubes::BaseCube|EString])?
		('columns' '{' columns+=CubeColumn ( "," columns+=CubeColumn)* '}' )?
	'}';

FunctionSpec_Impl returns functions::FunctionSpec:
	{functions::FunctionSpec}
	'FunctionSpec'
	name=EString
	'{'
		('functionalName' functionalName=EString)?
		('sqlName' sqlName=EString)?
		('parameterSpecs' '{' parameterSpecs+=ParamaterSpec ( "," parameterSpecs+=ParamaterSpec)* '}' )?
	'}';

ColumnFunctionGroup returns column_transformation_logic::ColumnFunctionGroup:
	{column_transformation_logic::ColumnFunctionGroup}
	'ColumnFunctionGroup'
	'{'
		('columnFunctions' '{' columnFunctions+=ColumnFunction ( "," columnFunctions+=ColumnFunction)* '}' )?
	'}';

RowCreationApproachForCube returns row_transformation_logic::RowCreationApproachForCube:
	{row_transformation_logic::RowCreationApproachForCube}
	'RowCreationApproachForCube'
	name=EString
	'{'
		('cube' cube=[cubes::FreeBirdToolsCube|EString])?
		('rowCreationApproach' rowCreationApproach=RowCreationApproach)?
	'}';

ColumnFunction_Impl returns column_transformation_logic::ColumnFunction:
	{column_transformation_logic::ColumnFunction}
	(usedInSubsets?='usedInSubsets')?
	'ColumnFunction'
	columnID=EString
	'{'
		('cube' cube=[cubes::FreeBirdToolsCube|EString])?
		('variable' variable=[core::VARIABLE|EString])?
	'}';

FreeBirdToolsCube_Impl returns cubes::FreeBirdToolsCube:
	{cubes::FreeBirdToolsCube}
	'FreeBirdToolsCube'
	name=EString;

AggregateColumnFunction returns column_transformation_logic::AggregateColumnFunction:
	{column_transformation_logic::AggregateColumnFunction}
	(usedInSubsets?='usedInSubsets')?
	'AggregateColumnFunction'
	columnID=EString
	'{'
		('cube' cube=[cubes::FreeBirdToolsCube|EString])?
		('variable' variable=[core::VARIABLE|EString])?
		('aggregateFunction' aggregateFunction=AggregateFunction)?
	'}';

BasicColumnFunction returns column_transformation_logic::BasicColumnFunction:
	{column_transformation_logic::BasicColumnFunction}
	(usedInSubsets?='usedInSubsets')?
	'BasicColumnFunction'
	columnID=EString
	'{'
		('cube' cube=[cubes::FreeBirdToolsCube|EString])?
		('variable' variable=[core::VARIABLE|EString])?
		('basicFunction' basicFunction=BasicFunction)?
	'}';

BaseCube returns cubes::BaseCube:
	{cubes::BaseCube}
	'BaseCube'
	name=EString;

DerivedCube_Impl returns cubes::DerivedCube:
	{cubes::DerivedCube}
	'DerivedCube'
	name=EString
	'{'
		('sourceCubes' '(' sourceCubes+=[cubes::FreeBirdToolsCube|EString] ( "," sourceCubes+=[cubes::FreeBirdToolsCube|EString])* ')' )?
	'}';

TargetCube returns cubes::TargetCube:
	{cubes::TargetCube}
	'TargetCube'
	name=EString
	'{'
		('sourceCubes' '(' sourceCubes+=[cubes::FreeBirdToolsCube|EString] ( "," sourceCubes+=[cubes::FreeBirdToolsCube|EString])* ')' )?
	'}';

AggregateFunction returns functions::AggregateFunction:
	{functions::AggregateFunction}
	'AggregateFunction'
	name=EString
	'{'
		('functionSpec' functionSpec=[functions::AggregateFunctionSpec|EString])?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Parameter_Impl returns functions::Parameter:
	{functions::Parameter}
	'Parameter'
	;

AggregateFunctionSpec returns functions::AggregateFunctionSpec:
	{functions::AggregateFunctionSpec}
	'AggregateFunctionSpec'
	name=EString
	'{'
		('functionalName' functionalName=EString)?
		('sqlName' sqlName=EString)?
		('parameterSpecs' '{' parameterSpecs+=ParamaterSpec ( "," parameterSpecs+=ParamaterSpec)* '}' )?
	'}';

BasicFunction_Impl returns functions::BasicFunction:
	{functions::BasicFunction}
	'BasicFunction'
	name=EString
	'{'
		('functionSpec' functionSpec=[functions::BasicFunctionSpec|EString])?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

BooleanFunction returns functions::BooleanFunction:
	{functions::BooleanFunction}
	'BooleanFunction'
	name=EString
	'{'
		('functionSpec' functionSpec=[functions::BasicFunctionSpec|EString])?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Function_Impl returns functions::Function:
	{functions::Function}
	'Function'
	name=EString
	'{'
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

BasicFunctionSpec returns functions::BasicFunctionSpec:
	{functions::BasicFunctionSpec}
	(isInfix?='isInfix')?
	'BasicFunctionSpec'
	name=EString
	'{'
		('functionalName' functionalName=EString)?
		('sqlName' sqlName=EString)?
		('parameterSpecs' '{' parameterSpecs+=ParamaterSpec ( "," parameterSpecs+=ParamaterSpec)* '}' )?
	'}';

ParamaterSpec returns functions::ParamaterSpec:
	{functions::ParamaterSpec}
	'ParamaterSpec'
	name=EString;

RowCreationApproach_Impl returns row_transformation_logic::RowCreationApproach:
	{row_transformation_logic::RowCreationApproach}
	'RowCreationApproach'
	'{'
		('dependantCubeColumns' '{' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* '}' )?
		('createdCubeColumns' '{' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* '}' )?
	'}';

ResolvedCubeColumnParameter returns column_transformation_logic::ResolvedCubeColumnParameter:
	{column_transformation_logic::ResolvedCubeColumnParameter}
	'ResolvedCubeColumnParameter'
	'{'
		('cubeColumn' cubeColumn=[column_transformation_logic::CubeColumn|EString])?
	'}';

CubeColumn_Impl returns column_transformation_logic::CubeColumn:
	{column_transformation_logic::CubeColumn}
	(usedInSubsets?='usedInSubsets')?
	'CubeColumn'
	columnID=EString
	'{'
		('cube' cube=[cubes::FreeBirdToolsCube|EString])?
		('variable' variable=[core::VARIABLE|EString])?
	'}';

CustomRowCreationApproach returns row_transformation_logic::CustomRowCreationApproach:
	{row_transformation_logic::CustomRowCreationApproach}
	'CustomRowCreationApproach'
	'{'
		('dependantVariables' '(' dependantVariables+=[core::VARIABLE|EString] ( "," dependantVariables+=[core::VARIABLE|EString])* ')' )?
		('dependantCubeColumns' '{' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* '}' )?
		('createdCubeColumns' '{' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* '}' )?
	'}';

FilterAndGroupToOneRowCreationApproach returns row_transformation_logic::FilterAndGroupToOneRowCreationApproach:
	{row_transformation_logic::FilterAndGroupToOneRowCreationApproach}
	'FilterAndGroupToOneRowCreationApproach'
	'{'
		('groupByVariables' '(' groupByVariables+=[core::VARIABLE|EString] ( "," groupByVariables+=[core::VARIABLE|EString])* ')' )?
		('dependantCubeColumns' '{' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* '}' )?
		('createdCubeColumns' '{' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* '}' )?
		('filterFunction' filterFunction=BooleanFunction)?
	'}';

OneToOneRowCreationApproach returns row_transformation_logic::OneToOneRowCreationApproach:
	{row_transformation_logic::OneToOneRowCreationApproach}
	'OneToOneRowCreationApproach'
	'{'
		('dependantCubeColumns' '{' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* '}' )?
		('createdCubeColumns' '{' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* '}' )?
	'}';

FilterRowCreationApproach returns row_transformation_logic::FilterRowCreationApproach:
	{row_transformation_logic::FilterRowCreationApproach}
	'FilterRowCreationApproach'
	'{'
		('dependantCubeColumns' '{' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* '}' )?
		('createdCubeColumns' '{' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* '}' )?
		('filterFunction' filterFunction=BooleanFunction)?
	'}';

GroupByRowCreationApproach returns row_transformation_logic::GroupByRowCreationApproach:
	{row_transformation_logic::GroupByRowCreationApproach}
	'GroupByRowCreationApproach'
	'{'
		('groupByColumns' '(' groupByColumns+=[core::VARIABLE|EString] ( "," groupByColumns+=[core::VARIABLE|EString])* ')' )?
		('groupByCubeColumns' '(' groupByCubeColumns+=[column_transformation_logic::CubeColumn|EString] ( "," groupByCubeColumns+=[column_transformation_logic::CubeColumn|EString])* ')' )?
		('dependantCubeColumns' '{' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* '}' )?
		('createdCubeColumns' '{' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* '}' )?
	'}';

RowJoinFunction returns row_transformation_logic::RowJoinFunction:
	{row_transformation_logic::RowJoinFunction}
	'RowJoinFunction'
	'{'
		('dependantCubeColumns' '{' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* '}' )?
		('createdCubeColumns' '{' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* '}' )?
		('joinFunction' joinFunction=BooleanFunction)?
	'}';

UnionRowCreationApproach returns row_transformation_logic::UnionRowCreationApproach:
	{row_transformation_logic::UnionRowCreationApproach}
	'UnionRowCreationApproach'
	'{'
		('dependantCubeColumns' '{' dependantCubeColumns+=ResolvedCubeColumnParameter ( "," dependantCubeColumns+=ResolvedCubeColumnParameter)* '}' )?
		('createdCubeColumns' '{' createdCubeColumns+=CubeColumn ( "," createdCubeColumns+=CubeColumn)* '}' )?
	'}';

DataLineageModel returns data_lineage::DataLineageModel:
	{data_lineage::DataLineageModel}
	'DataLineageModel'
	name=EString
	'{'
		('dataTraceableByCell' '{' dataTraceableByCell+=DerivedCubeData ( "," dataTraceableByCell+=DerivedCubeData)* '}' )?
		('sourceData' '{' sourceData+=BaseColumnStructuredData ( "," sourceData+=BaseColumnStructuredData)* '}' )?
	'}';

DerivedCubeData returns cell_transformation_logic::DerivedCubeData:
	{cell_transformation_logic::DerivedCubeData}
	'DerivedCubeData'
	name=EString
	'{'
		('cube' cube=[cubes::DerivedCube|EString])?
		('rowCreationApproachForCube' rowCreationApproachForCube=[row_transformation_logic::RowCreationApproachForCube|EString])?
		('sourceCubeData' '(' sourceCubeData+=[column_structured_data::ColumnStructuredData|EString] ( "," sourceCubeData+=[column_structured_data::ColumnStructuredData|EString])* ')' )?
		('rows' '{' rows+=DerivedRowData ( "," rows+=DerivedRowData)* '}' )?
	'}';

DerivedRowData returns cell_transformation_logic::DerivedRowData:
	{cell_transformation_logic::DerivedRowData}
	'DerivedRowData'
	rowID=EString
	'{'
		('sourceRows' '(' sourceRows+=[column_structured_data::RowData|EString] ( "," sourceRows+=[column_structured_data::RowData|EString])* ')' )?
		('formulaCells' '{' formulaCells+=FormulaCell ( "," formulaCells+=FormulaCell)* '}' )?
		('specialDerivedCells' specialDerivedCells=FormulaCell)?
	'}';

ColumnStructuredData returns column_structured_data::ColumnStructuredData:
	{column_structured_data::ColumnStructuredData}
	'ColumnStructuredData'
	name=EString;

FormulaCell returns cell_transformation_logic::FormulaCell:
	{cell_transformation_logic::FormulaCell}
	'FormulaCell'
	cellID=EString
	'{'
		('value' value=EString)?
		('column' column=[core::VARIABLE|EString])?
		('function' function=Function)?
	'}';

RowData returns column_structured_data::RowData:
	{column_structured_data::RowData}
	'RowData'
	rowID=EString;

	
	EDate returns ecore::EDate : INT '.' INT '.' INT;
	

