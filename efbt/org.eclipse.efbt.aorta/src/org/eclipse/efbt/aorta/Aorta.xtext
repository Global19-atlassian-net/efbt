// automatically generated by Xtext
grammar org.eclipse.efbt.aorta.Aorta with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/test" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/execution_environments" as execution_environments
import "http://www.eclipse.org/report_structures" as report_structures
import "http://www.eclipse.org/column_structured_data" as column_structured_data
import "http://www.eclipse.org/test_definition" as test_definition
import "http://www.eclipse.org/test_input_data" as test_input_data
import "http://www.eclipse.org/module_management" as module_management
import "http://www.eclipse.org/data_lineage" as data_lineage
import "http://www.eclipse.org/cell_transformation_logic" as cell_transformation_logic
import "http://www.eclipse.org/base_column_structured_data" as base_column_structured_data
import "http://www.eclipse.org/output_data_structures" as output_data_structures
import "http://www.eclipse.org/deep_structures" as deep_structures
import "http://www.eclipse.org/scenarios" as scenarios
import "http://www.eclipse.org/requirements_text" as requirements_text
import "http://www.eclipse.org/column_structures" as column_structures
import "http://www.eclipse.org/technical_specification_breakdown" as technical_specification_breakdown
import "http://www.eclipse.org/functionality_module" as functionality_module
import "http://www.eclipse.org/dataset_based_functional_domain_breakdown" as dataset_based_functional_domain_breakdown
import "http://www.eclipse.org/input_data_structures" as input_data_structures
import "http://www.eclipse.org/requirements_artefacts" as requirements_artefacts
import "http://www.eclipse.org/aortafunctions" as aortafunctions
import "http://www.eclipse.org/aorta_program" as aorta_program
import "http://www.eclipse.org/bdd_test_definitions" as bdd_test_definitions
import "http://www.eclipse.org/coverage" as coverage
import "http://www.eclipse.org/output_data_sets" as output_data_sets
import "http://www.eclipse.org/report_based_report_based_functional_domain_breakdown" as report_based_report_based_functional_domain_breakdown
import "http://www.eclipse.org/structural_change_test_definitions" as structural_change_test_definitions
import "http://www.eclipse.org/requirements_based_test_definition" as requirements_based_test_definition
import "http://www.eclipse.org/test_review" as test_review
import "http://www.eclipse.org/test_worked_example" as test_worked_example

Program returns aorta_program::Program:
	{aorta_program::Program}
	'Program'
	'{'
		('domainModule' domainModule=ColumnDomainModule)?
		('requirements' requirements=RequirementsModule)?
		('input_structures' input_structures=ColumnStructureModule)?
		('reportStructures' reportStructures=RegReportModule)?
		('testDefinitions' testDefinitions=BDDTestDefinitionModule)?
		('tests' tests=TestModule)?
		('requirementsArtefacts' requirementsArtefacts=InputTypeModule)?
		('coverageTypes' coverageTypes=CoverageTypeModule)?
		('coverageTestSets' coverageTestSets=CoverageTestSetModule)?
	'}';

















BDDTestDefinition returns bdd_test_definitions::BDDTestDefinition:
	BDDTestDefinition_Impl | GenericBDD;










RequirementsSection returns requirements_text::RequirementsSection:
	RequirementsSectionImage | RequirementsSectionLinkWithText | RequirementsSectionText | TitledRequirementsSection;
















TestInputData returns test_input_data::TestInputData:
	TestInputData_Impl | TestColumnStructuredData | TestStrucuredFileData;

Result returns Result:
	Result_Impl | ReportCellResults | DataSetResults;






BaseCell returns base_column_structured_data::BaseCell:
	BaseCellWithEnumeratedValue | BaseCellWithValue;



ColumnDomainModule returns column_structures::ColumnDomainModule:
	{column_structures::ColumnDomainModule}
	'ColumnDomainModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('columnDomains' '{' columnDomains+=ColumnDomain ( "," columnDomains+=ColumnDomain)* '}' )?
	'}';

RequirementsModule returns requirements_text::RequirementsModule:
	{requirements_text::RequirementsModule}
	'RequirementsModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('rules' '{' rules+=TitledRequirementsSection ( "," rules+=TitledRequirementsSection)* '}' )?
		('allowedtypes' allowedtypes=AllowedTypes)?
	'}';

ColumnStructureModule returns column_structures::ColumnStructureModule:
	{column_structures::ColumnStructureModule}
	'ColumnStructureModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('columnStructures' '{' columnStructures+=ColumnStructuredEntity ( "," columnStructures+=ColumnStructuredEntity)* '}' )?
	'}';

RegReportModule returns report_structures::RegReportModule:
	{report_structures::RegReportModule}
	'RegReportModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('reportGroups' '{' reportGroups+=ReportGroup ( "," reportGroups+=ReportGroup)* '}' )?
	'}';

BDDTestDefinitionModule returns bdd_test_definitions::BDDTestDefinitionModule:
	{bdd_test_definitions::BDDTestDefinitionModule}
	'BDDTestDefinitionModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('testDefinitions' '{' testDefinitions+=BDDTestDefinition ( "," testDefinitions+=BDDTestDefinition)* '}' )?
	'}';

TestModule returns TestModule:
	{TestModule}
	'TestModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('executionEnvironment' executionEnvironment=[execution_environments::TestExecutionEnvironment|QualifiedName])?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('tests' '{' tests+=E2ETest ( "," tests+=E2ETest)* '}' )?
	'}';

InputTypeModule returns requirements_artefacts::InputTypeModule:
	{requirements_artefacts::InputTypeModule}
	'InputTypeModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('inputTypes' '{' inputTypes+=InputType ( "," inputTypes+=InputType)* '}' )?
	'}';

CoverageTypeModule returns coverage::CoverageTypeModule:
	{coverage::CoverageTypeModule}
	'CoverageTypeModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('coverageTypes' '{' coverageTypes+=CoverageType ( "," coverageTypes+=CoverageType)* '}' )?
	'}';

CoverageTestSetModule returns coverage::CoverageTestSetModule:
	{coverage::CoverageTestSetModule}
	'CoverageTestSetModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
		('coverageTestSets' '{' coverageTestSets+=CoverageTestSet ( "," coverageTestSets+=CoverageTestSet)* '}' )?
	'}';

ModuleDependencies returns module_management::ModuleDependencies:
	{module_management::ModuleDependencies}
	'ModuleDependencies'
	'{'
		('theModules' '{' theModules+=ModuleDependency ( "," theModules+=ModuleDependency)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

ModuleLongName returns module_management::ModuleLongName:
	{module_management::ModuleLongName}
	'ModuleLongName'
	name=EString;

ColumnDomain returns column_structures::ColumnDomain:
	{column_structures::ColumnDomain}
	(isEnumerated?='isEnumerated')?
	'ColumnDomain'
	name=EString
	'{'
		('enumMembers' '{' enumMembers+=EnumMember ( "," enumMembers+=EnumMember)* '}' )?
		('dataType' dataType=ColumnDataType)?
	'}';

ModuleDependency returns module_management::ModuleDependency:
	{module_management::ModuleDependency}
	'ModuleDependency'
	'{'
		('moduleName' moduleName=EString)?
		('moduleVersion' moduleVersion=EString)?
		('theModule' theModule=[module_management::Module|QualifiedName])?
		('longName' longName=[module_management::ModuleLongName|QualifiedName])?
	'}';

EnumMember returns column_structures::EnumMember:
	{column_structures::EnumMember}
	'EnumMember'
	name=EString;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

ColumnDataType returns column_structures::ColumnDataType:
	{column_structures::ColumnDataType}
	'ColumnDataType'
	name=EString;

TitledRequirementsSection returns requirements_text::TitledRequirementsSection:
	'TitledRequirementsSection'
	name=EString
	'{'
		('title' title=EString)?
		('referencingSections' referencingSections=[requirements_text::RequirementsSectionLinkWithText|QualifiedName])?
		'requirementsType' requirementsType=[requirements_text::RequirementType|QualifiedName]
		('sections' '{' sections+=RequirementsSection ( "," sections+=RequirementsSection)* '}' )?
	'}';

AllowedTypes returns requirements_text::AllowedTypes:
	{requirements_text::AllowedTypes}
	'AllowedTypes'
	'{'
		('allowedTypes' '{' allowedTypes+=RequirementType ( "," allowedTypes+=RequirementType)* '}' )?
	'}';

RequirementsSectionLinkWithText returns requirements_text::RequirementsSectionLinkWithText:
	{requirements_text::RequirementsSectionLinkWithText}
	'RequirementsSectionLinkWithText'
	name=EString
	'{'
		('linkText' linkText=EString)?
		('subsection' subsection=EString)?
		('linkedRuleSection' linkedRuleSection=[requirements_text::TitledRequirementsSection|QualifiedName])?
	'}';

RequirementType returns requirements_text::RequirementType:
	{requirements_text::RequirementType}
	'RequirementType'
	name=EString;

RequirementsSectionImage returns requirements_text::RequirementsSectionImage:
	{requirements_text::RequirementsSectionImage}
	'RequirementsSectionImage'
	name=EString
	'{'
		('style' style=EString)?
		('uri' uri=EString)?
	'}';

RequirementsSectionText returns requirements_text::RequirementsSectionText:
	{requirements_text::RequirementsSectionText}
	'RequirementsSectionText'
	name=EString
	'{'
		('text' text=EString)?
	'}';

ColumnStructuredEntity returns column_structures::ColumnStructuredEntity:
	{column_structures::ColumnStructuredEntity}
	'ColumnStructuredEntity'
	name=EString
	'{'
		('column' '{' column+=Column ( "," column+=Column)* '}' )?
	'}';

Column returns column_structures::Column:
	{column_structures::Column}
	'Column'
	name=EString
	'{'
		('domain' domain=[column_structures::ColumnDomain|QualifiedName])?
	'}';

ReportGroup returns report_structures::ReportGroup:
	{report_structures::ReportGroup}
	'ReportGroup'
	name=EString
	'{'
		('regReports' '{' regReports+=RegReport ( "," regReports+=RegReport)* '}' )?
	'}';

RegReport returns report_structures::RegReport:
	{report_structures::RegReport}
	'RegReport'
	name=EString
	'{'
		('cells' '{' cells+=RegReportCell ( "," cells+=RegReportCell)* '}' )?
	'}';

RegReportCell returns report_structures::RegReportCell:
	{report_structures::RegReportCell}
	'RegReportCell'
	name=EString;

BDDTestDefinition_Impl returns bdd_test_definitions::BDDTestDefinition:
	{bdd_test_definitions::BDDTestDefinition}
	'BDDTestDefinition'
	name=EString
	'{'
		('coverageTestSet' coverageTestSet=[coverage::CoverageTestSet|QualifiedName])?
	'}';

CoverageTestSet returns coverage::CoverageTestSet:
	{coverage::CoverageTestSet}
	'CoverageTestSet'
	name=EString
	'{'
		('coverageType' coverageType=[coverage::CoverageType|QualifiedName])?
		('givenParams' givenParams=GivenParams)?
		('whenParams' whenParams=WhenParams)?
		('thenParams' thenParams=ThenParams)?
	'}';

GenericBDD returns bdd_test_definitions::GenericBDD:
	{bdd_test_definitions::GenericBDD}
	'GenericBDD'
	name=EString
	'{'
		('coverageTestSet' coverageTestSet=[coverage::CoverageTestSet|QualifiedName])?
		('given' given=GenericGiven)?
		('when' when=GenericWhen)?
		('then' then=GenericThen)?
	'}';

CoverageType returns coverage::CoverageType:
	{coverage::CoverageType}
	'CoverageType'
	name=EString
	'{'
		('givenText' givenText=ClauseText)?
		('whenText' whenText=ClauseText)?
		('thenText' thenText=ClauseText)?
		('givenParams' givenParams=GivenParams)?
		('whenParams' whenParams=WhenParams)?
		('thenParams' thenParams=ThenParams)?
	'}';

GivenParams returns coverage::GivenParams:
	{coverage::GivenParams}
	'GivenParams'
	'{'
		('params' '(' params+=[ecore::EObject|QualifiedName] ( "," params+=[ecore::EObject|QualifiedName])* ')' )?
	'}';

WhenParams returns coverage::WhenParams:
	{coverage::WhenParams}
	'WhenParams'
	'{'
		('params' '(' params+=[ecore::EObject|QualifiedName] ( "," params+=[ecore::EObject|QualifiedName])* ')' )?
	'}';

ThenParams returns coverage::ThenParams:
	{coverage::ThenParams}
	'ThenParams'
	'{'
		('params' '(' params+=[ecore::EObject|QualifiedName] ( "," params+=[ecore::EObject|QualifiedName])* ')' )?
	'}';

ClauseText returns bdd_test_definitions::ClauseText:
	{bdd_test_definitions::ClauseText}
	'ClauseText'
	name=EString;

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

GenericGiven returns bdd_test_definitions::GenericGiven:
	{bdd_test_definitions::GenericGiven}
	'GenericGiven'
	'{'
		('regulatoryTextLinks' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName])* ')' )?
		('text' text=[bdd_test_definitions::ClauseText|QualifiedName])?
		('params' '{' params+=BDDParam ( "," params+=BDDParam)* '}' )?
	'}';

GenericWhen returns bdd_test_definitions::GenericWhen:
	{bdd_test_definitions::GenericWhen}
	'GenericWhen'
	'{'
		('regulatoryTextLinks' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName])* ')' )?
		('text' text=[bdd_test_definitions::ClauseText|QualifiedName])?
		('params' '{' params+=BDDParam ( "," params+=BDDParam)* '}' )?
	'}';

GenericThen returns bdd_test_definitions::GenericThen:
	{bdd_test_definitions::GenericThen}
	'GenericThen'
	'{'
		('regulatoryTextLinks' '(' regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName] ( "," regulatoryTextLinks+=[requirements_text::TitledRequirementsSection|QualifiedName])* ')' )?
		('text' text=[bdd_test_definitions::ClauseText|QualifiedName])?
		('params' '{' params+=BDDParam ( "," params+=BDDParam)* '}' )?
	'}';

BDDParam returns bdd_test_definitions::BDDParam:
	{bdd_test_definitions::BDDParam}
	'BDDParam'
	'{'
		('param' param=[ecore::EObject|QualifiedName])?
	'}';

E2ETest returns E2ETest:
	{E2ETest}
	'E2ETest'
	name=EString
	'{'
		('testDefinition' testDefinition=[test_definition::E2ETestDefinition|QualifiedName])?
		('inputData' inputData=TestInputData)?
		('expectedResults' expectedResults=Result)?
	'}';

TestExecutionEnvironment returns execution_environments::TestExecutionEnvironment:
	{execution_environments::TestExecutionEnvironment}
	'TestExecutionEnvironment'
	name=EString
	'{'
		('inputStructures' inputStructures=[input_data_structures::InputDatastructureModule|QualifiedName])?
		('outputStructuresModule' outputStructuresModule=[output_data_structures::OutputDataStructureModule|QualifiedName])?
	'}';

E2ETestDefinition returns test_definition::E2ETestDefinition:
	{test_definition::E2ETestDefinition}
	'E2ETestDefinition'
	name=EString
	'{'
		('coverageTestSet' coverageTestSet=[coverage::CoverageTestSet|QualifiedName])?
	'}';

TestInputData_Impl returns test_input_data::TestInputData:
	{test_input_data::TestInputData}
	'TestInputData'
	name=EString;

Result_Impl returns Result:
	{Result}
	'Result'
	;

TestColumnStructuredData returns test_input_data::TestColumnStructuredData:
	{test_input_data::TestColumnStructuredData}
	'TestColumnStructuredData'
	name=EString
	'{'
		('sourceTableData' '{' sourceTableData+=BaseColumnStructuredData ( "," sourceTableData+=BaseColumnStructuredData)* '}' )?
	'}';

TestStrucuredFileData returns test_input_data::TestStrucuredFileData:
	{test_input_data::TestStrucuredFileData}
	'TestStrucuredFileData'
	name=EString
	'{'
		('testFileData' '{' testFileData+=StructuredFile ( "," testFileData+=StructuredFile)* '}' )?
	'}';

BaseColumnStructuredData returns base_column_structured_data::BaseColumnStructuredData:
	{base_column_structured_data::BaseColumnStructuredData}
	'BaseColumnStructuredData'
	name=EString
	'{'
		('cube' cube=[column_structures::ColumnStructuredEntity|QualifiedName])?
		('rows' '{' rows+=BaseRowData ( "," rows+=BaseRowData)* '}' )?
	'}';

BaseRowData returns base_column_structured_data::BaseRowData:
	{base_column_structured_data::BaseRowData}
	(isDelete?='isDelete')?
	'BaseRowData'
	rowID=EString
	'{'
		('rowIDToDelete' rowIDToDelete=EString)?
		('cells' '{' cells+=BaseCell ( "," cells+=BaseCell)* '}' )?
	'}';

BaseCellWithEnumeratedValue returns base_column_structured_data::BaseCellWithEnumeratedValue:
	{base_column_structured_data::BaseCellWithEnumeratedValue}
	'BaseCellWithEnumeratedValue'
	cellID=EString
	'{'
		('column' column=[column_structures::Column|QualifiedName])?
		('value' value=[column_structures::EnumMember|QualifiedName])?
	'}';

BaseCellWithValue returns base_column_structured_data::BaseCellWithValue:
	{base_column_structured_data::BaseCellWithValue}
	'BaseCellWithValue'
	cellID=EString
	'{'
		('value' value=EString)?
		('column' column=[column_structures::Column|QualifiedName])?
	'}';

StructuredFile returns test_input_data::StructuredFile:
	{test_input_data::StructuredFile}
	'StructuredFile'
	'{'
		('fileLocation' fileLocation=EString)?
	'}';

ReportCellResults returns ReportCellResults:
	{ReportCellResults}
	'ReportCellResults'
	'{'
		('reportCellValues' '{' reportCellValues+=RegReportCellValue ( "," reportCellValues+=RegReportCellValue)* '}' )?
	'}';

DataSetResults returns DataSetResults:
	{DataSetResults}
	'DataSetResults'
	'{'
		('expectedResults' '{' expectedResults+=ColumnStructuredData ( "," expectedResults+=ColumnStructuredData)* '}' )?
	'}';

RegReportCellValue returns report_structures::RegReportCellValue:
	{report_structures::RegReportCellValue}
	'RegReportCellValue'
	'{'
		('value' value=EString)?
		('cell' cell=[report_structures::RegReportCell|QualifiedName])?
	'}';

ColumnStructuredData returns column_structured_data::ColumnStructuredData:
	{column_structured_data::ColumnStructuredData}
	'ColumnStructuredData'
	name=EString;

InputDatastructureModule returns input_data_structures::InputDatastructureModule:
	{input_data_structures::InputDatastructureModule}
	'InputDatastructureModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
	'}';

OutputDataStructureModule returns output_data_structures::OutputDataStructureModule:
	{output_data_structures::OutputDataStructureModule}
	'OutputDataStructureModule'
	name=EString
	'{'
		('theDescription' theDescription=EString)?
		('license' license=EString)?
		('version' version=EString)?
		('dependencies' dependencies=ModuleDependencies)?
		('longName' longName=ModuleLongName)?
	'}';

InputType returns requirements_artefacts::InputType:
	{requirements_artefacts::InputType}
	'InputType'
	name=EString;

QualifiedName:
    ID ('.' ID)*;