/*
 * generated by Xtext 2.21.0
 */
package org.eclipse.efbt.aorta.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EReference

import org.eclipse.xtext.EcoreUtil2

import org.eclipse.xtext.scoping.Scopes

import org.apache.log4j.LogManager

import test_definition.Param
import test_definition.Clause
import test_definition.TestDefinition
import test_definition.Given
import test_definition.When
import test_definition.Then

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AortaScopeProvider extends AbstractAortaScopeProvider {

    
	
	override  IScope getScope(EObject context, EReference reference) {
        // We want to define the Scope for the Element's superElement cross-reference
         val LOGGER = LogManager.getLogger(AortaScopeProvider)
     
         if ((context.eContainer) instanceof Clause )
         {
	         if(context instanceof Param)
	         {
	         	val  bddclauseElement = (context.eContainer) as Clause
	         	val bddElement = (bddclauseElement.eContainer) as TestDefinition
	         	 val coverageTestSet = bddElement.testContraints
	         	  val coverageTestType = coverageTestSet.template
	         	  
	
	         	//find out index of contianing bddclauseElement
	         	val index = bddclauseElement.params.indexOf(context)
	        
	         if (bddclauseElement instanceof Given) {
	        	
	        	val size = coverageTestSet.givenParams.length
	        	if( index < size)
	        	{
		        	val templateObject = coverageTestSet.givenParams.get(index).param
		        	val templateType = coverageTestType.givenParams.get(index).param
		        	
		              
		             System.err.println("given templateObject = " + templateObject)
		             System.err.println("given templateType = " + templateType)
		        	
		        	 val candidates = EcoreUtil2.getAllContentsOfType(templateObject, templateType.class)
		        	 System.err.println("given candidates = " + candidates)
		        	 return Scopes.scopeFor(candidates)
	        	 }
	        	 
	         }
	        	if (bddclauseElement instanceof When) {
	        	
	        	val size = coverageTestSet.whenParams.length
	        	if( index < size)
	        	{
		        		val templateObject = coverageTestSet.whenParams.get(index).param
		        	val templateType = coverageTestType.whenParams.get(index).param
		        	
		              
		             System.err.println("when templateObject = " + templateObject)
		             System.err.println("when templateType = " + templateType)
		        	
		        	 val candidates = EcoreUtil2.getAllContentsOfType(templateObject, templateType.class)
		        	 
		        	 return Scopes.scopeFor(candidates)
	        	 }
	        	 
	         }
	         
	         if (bddclauseElement instanceof Then) {
	        	
	        	val size = coverageTestSet.thenParams.length
	        	if( index < size)
	        	{
	        		
	        	
	        	val templateObject = coverageTestSet.thenParams.get(index).param
	        	val templateType = coverageTestType.thenParams.get(index).param
	        	
	              
	             System.err.println("then templateObject = " + templateObject)
	             System.err.println("then templateType = " + templateType)
	        	
	        	 val candidates = EcoreUtil2.getAllContentsOfType(templateObject, templateType.class)
	        	 
	        	 return Scopes.scopeFor(candidates)
	        	 
	        	 }
	         }
	            
	        
	    }
	    
	    }
    return super.getScope(context, reference)
    }
    }

