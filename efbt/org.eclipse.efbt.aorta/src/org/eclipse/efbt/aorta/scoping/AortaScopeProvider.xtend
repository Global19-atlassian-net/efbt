/*
 * generated by Xtext 2.21.0
 */
package org.eclipse.efbt.aorta.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EReference

import org.eclipse.xtext.EcoreUtil2

import org.eclipse.xtext.scoping.Scopes

import org.apache.log4j.LogManager
import bdd_test_definitions.GenericGiven
import bdd_test_definitions.BDDParam
import bdd_test_definitions.BDDClause
import bdd_test_definitions.GenericBDD
import bdd_test_definitions.GenericWhen
import bdd_test_definitions.GenericThen

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AortaScopeProvider extends AbstractAortaScopeProvider {

    
	
	override  IScope getScope(EObject context, EReference reference) {
        // We want to define the Scope for the Element's superElement cross-reference
         val LOGGER = LogManager.getLogger(AortaScopeProvider)
     
         
         if(context instanceof BDDParam)
         {
         	val  bddclauseElement = (context.eContainer) as BDDClause
         	val bddElement = (bddclauseElement.eContainer) as GenericBDD
         	 val coverageTestSet = bddElement.coverageTestSet
         	  val coverageTestType = coverageTestSet.coverageType
         	  

         	//find out index of contianing bddclauseElement
         	val index = bddclauseElement.params.indexOf(context)
        
         if (bddclauseElement instanceof GenericGiven) {
        	
        	val size = coverageTestSet.givenParams.params.length
        	if( index < size)
        	{
	        	val templateObject = coverageTestSet.givenParams.params.get(index)
	        	val templateType = coverageTestType.givenParams.params.get(index)
	        	
	              
	             System.err.println("given templateObject = " + templateObject)
	             System.err.println("given templateType = " + templateType)
	        	
	        	 val candidates = EcoreUtil2.getAllContentsOfType(templateObject, templateType.class)
	        	 System.err.println("given candidates = " + candidates)
	        	 return Scopes.scopeFor(candidates)
        	 }
        	 
         }
        	if (bddclauseElement instanceof GenericWhen) {
        	
        	val size = coverageTestSet.whenParams.params.length
        	if( index < size)
        	{
	        		val templateObject = coverageTestSet.whenParams.params.get(index)
	        	val templateType = coverageTestType.whenParams.params.get(index)
	        	
	              
	             System.err.println("when templateObject = " + templateObject)
	             System.err.println("when templateType = " + templateType)
	        	
	        	 val candidates = EcoreUtil2.getAllContentsOfType(templateObject, templateType.class)
	        	 
	        	 return Scopes.scopeFor(candidates)
        	 }
        	 
         }
         
         if (bddclauseElement instanceof GenericThen) {
        	
        	val size = coverageTestSet.thenParams.params.length
        	if( index < size)
        	{
        		
        	
        	val templateObject = coverageTestSet.thenParams.params.get(index)
        	val templateType = coverageTestType.thenParams.params.get(index)
        	
              
             System.err.println("then templateObject = " + templateObject)
             System.err.println("then templateType = " + templateType)
        	
        	 val candidates = EcoreUtil2.getAllContentsOfType(templateObject, templateType.class)
        	 
        	 return Scopes.scopeFor(candidates)
        	 
        	 }
         }
            
        
    }
    return super.getScope(context, reference)
    }
    }

