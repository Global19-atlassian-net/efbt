/**
 * generated by Xtext 2.21.0
 */
package org.eclipse.efbt.aorta.scoping;

import java.util.List;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.eclipse.efbt.aorta.scoping.AbstractAortaScopeProvider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.Conversions;
import test_definition.Clause;
import test_definition.Given;
import test_definition.Param;
import test_definition.TestContraints;
import test_definition.TestDefinition;
import test_definition.TestTemplate;
import test_definition.Then;
import test_definition.When;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class AortaScopeProvider extends AbstractAortaScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    final Logger LOGGER = LogManager.getLogger(AortaScopeProvider.class);
    EObject _eContainer = context.eContainer();
    if ((_eContainer instanceof Clause)) {
      if ((context instanceof Param)) {
        EObject _eContainer_1 = ((Param)context).eContainer();
        final Clause bddclauseElement = ((Clause) _eContainer_1);
        EObject _eContainer_2 = bddclauseElement.eContainer();
        final TestDefinition bddElement = ((TestDefinition) _eContainer_2);
        final TestContraints coverageTestSet = bddElement.getTestContraints();
        final TestTemplate coverageTestType = coverageTestSet.getTemplate();
        final int index = bddclauseElement.getParams().indexOf(context);
        if ((bddclauseElement instanceof Given)) {
          final int size = ((Object[])Conversions.unwrapArray(coverageTestSet.getGivenParams(), Object.class)).length;
          if ((index < size)) {
            final EObject templateObject = coverageTestSet.getGivenParams().get(index).getParam();
            final EObject templateType = coverageTestType.getGivenParams().get(index).getParam();
            System.err.println(("given templateObject = " + templateObject));
            System.err.println(("given templateType = " + templateType));
            final List<? extends EObject> candidates = EcoreUtil2.getAllContentsOfType(templateObject, templateType.getClass());
            System.err.println(("given candidates = " + candidates));
            return Scopes.scopeFor(candidates);
          }
        }
        if ((bddclauseElement instanceof When)) {
          final int size_1 = ((Object[])Conversions.unwrapArray(coverageTestSet.getWhenParams(), Object.class)).length;
          if ((index < size_1)) {
            final EObject templateObject_1 = coverageTestSet.getWhenParams().get(index).getParam();
            final EObject templateType_1 = coverageTestType.getWhenParams().get(index).getParam();
            System.err.println(("when templateObject = " + templateObject_1));
            System.err.println(("when templateType = " + templateType_1));
            final List<? extends EObject> candidates_1 = EcoreUtil2.getAllContentsOfType(templateObject_1, templateType_1.getClass());
            return Scopes.scopeFor(candidates_1);
          }
        }
        if ((bddclauseElement instanceof Then)) {
          final int size_2 = ((Object[])Conversions.unwrapArray(coverageTestSet.getThenParams(), Object.class)).length;
          if ((index < size_2)) {
            final EObject templateObject_2 = coverageTestSet.getThenParams().get(index).getParam();
            final EObject templateType_2 = coverageTestType.getThenParams().get(index).getParam();
            System.err.println(("then templateObject = " + templateObject_2));
            System.err.println(("then templateType = " + templateType_2));
            final List<? extends EObject> candidates_2 = EcoreUtil2.getAllContentsOfType(templateObject_2, templateType_2.getClass());
            return Scopes.scopeFor(candidates_2);
          }
        }
      }
    }
    return super.getScope(context, reference);
  }
}
